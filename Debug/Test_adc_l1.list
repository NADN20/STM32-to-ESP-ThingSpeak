
Test_adc_l1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec4  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005004  08005004  00006004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005064  08005064  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005064  08005064  00006064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800506c  0800506c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005070  08005070  00006070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005074  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000060  080050d4  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080050d4  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4ee  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002749  00000000  00000000  00015577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00017cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009de  00000000  00000000  000189a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c8a  00000000  00000000  00019386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001080e  00000000  00000000  0002e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082277  00000000  00000000  0003e81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0a95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  000c0ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c452c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08004fec 	.word	0x08004fec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08004fec 	.word	0x08004fec

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2iz>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000924:	d215      	bcs.n	8000952 <__aeabi_d2iz+0x36>
 8000926:	d511      	bpl.n	800094c <__aeabi_d2iz+0x30>
 8000928:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d912      	bls.n	8000958 <__aeabi_d2iz+0x3c>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000942:	fa23 f002 	lsr.w	r0, r3, r2
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000956:	d105      	bne.n	8000964 <__aeabi_d2iz+0x48>
 8000958:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800095c:	bf08      	it	eq
 800095e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b968 	b.w	8000c54 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9d08      	ldr	r5, [sp, #32]
 80009a2:	460c      	mov	r4, r1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d14e      	bne.n	8000a46 <__udivmoddi4+0xaa>
 80009a8:	4694      	mov	ip, r2
 80009aa:	458c      	cmp	ip, r1
 80009ac:	4686      	mov	lr, r0
 80009ae:	fab2 f282 	clz	r2, r2
 80009b2:	d962      	bls.n	8000a7a <__udivmoddi4+0xde>
 80009b4:	b14a      	cbz	r2, 80009ca <__udivmoddi4+0x2e>
 80009b6:	f1c2 0320 	rsb	r3, r2, #32
 80009ba:	4091      	lsls	r1, r2
 80009bc:	fa20 f303 	lsr.w	r3, r0, r3
 80009c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c4:	4319      	orrs	r1, r3
 80009c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80009d2:	fb07 1114 	mls	r1, r7, r4, r1
 80009d6:	fa1f f68c 	uxth.w	r6, ip
 80009da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e2:	fb04 f106 	mul.w	r1, r4, r6
 80009e6:	4299      	cmp	r1, r3
 80009e8:	d90a      	bls.n	8000a00 <__udivmoddi4+0x64>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80009f2:	f080 8110 	bcs.w	8000c16 <__udivmoddi4+0x27a>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 810d 	bls.w	8000c16 <__udivmoddi4+0x27a>
 80009fc:	3c02      	subs	r4, #2
 80009fe:	4463      	add	r3, ip
 8000a00:	1a59      	subs	r1, r3, r1
 8000a02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a06:	fb07 1110 	mls	r1, r7, r0, r1
 8000a0a:	fb00 f606 	mul.w	r6, r0, r6
 8000a0e:	fa1f f38e 	uxth.w	r3, lr
 8000a12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a16:	429e      	cmp	r6, r3
 8000a18:	d90a      	bls.n	8000a30 <__udivmoddi4+0x94>
 8000a1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a22:	f080 80fa 	bcs.w	8000c1a <__udivmoddi4+0x27e>
 8000a26:	429e      	cmp	r6, r3
 8000a28:	f240 80f7 	bls.w	8000c1a <__udivmoddi4+0x27e>
 8000a2c:	4463      	add	r3, ip
 8000a2e:	3802      	subs	r0, #2
 8000a30:	2100      	movs	r1, #0
 8000a32:	1b9b      	subs	r3, r3, r6
 8000a34:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a38:	b11d      	cbz	r5, 8000a42 <__udivmoddi4+0xa6>
 8000a3a:	40d3      	lsrs	r3, r2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d905      	bls.n	8000a56 <__udivmoddi4+0xba>
 8000a4a:	b10d      	cbz	r5, 8000a50 <__udivmoddi4+0xb4>
 8000a4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a50:	2100      	movs	r1, #0
 8000a52:	4608      	mov	r0, r1
 8000a54:	e7f5      	b.n	8000a42 <__udivmoddi4+0xa6>
 8000a56:	fab3 f183 	clz	r1, r3
 8000a5a:	2900      	cmp	r1, #0
 8000a5c:	d146      	bne.n	8000aec <__udivmoddi4+0x150>
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	d302      	bcc.n	8000a68 <__udivmoddi4+0xcc>
 8000a62:	4290      	cmp	r0, r2
 8000a64:	f0c0 80ee 	bcc.w	8000c44 <__udivmoddi4+0x2a8>
 8000a68:	1a86      	subs	r6, r0, r2
 8000a6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a6e:	2001      	movs	r0, #1
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d0e6      	beq.n	8000a42 <__udivmoddi4+0xa6>
 8000a74:	e9c5 6300 	strd	r6, r3, [r5]
 8000a78:	e7e3      	b.n	8000a42 <__udivmoddi4+0xa6>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	f040 808f 	bne.w	8000b9e <__udivmoddi4+0x202>
 8000a80:	eba1 040c 	sub.w	r4, r1, ip
 8000a84:	2101      	movs	r1, #1
 8000a86:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a8a:	fa1f f78c 	uxth.w	r7, ip
 8000a8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a92:	fb08 4416 	mls	r4, r8, r6, r4
 8000a96:	fb07 f006 	mul.w	r0, r7, r6
 8000a9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d908      	bls.n	8000ab8 <__udivmoddi4+0x11c>
 8000aa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aaa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0x11a>
 8000ab0:	4298      	cmp	r0, r3
 8000ab2:	f200 80cb 	bhi.w	8000c4c <__udivmoddi4+0x2b0>
 8000ab6:	4626      	mov	r6, r4
 8000ab8:	1a1c      	subs	r4, r3, r0
 8000aba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000abe:	fb08 4410 	mls	r4, r8, r0, r4
 8000ac2:	fb00 f707 	mul.w	r7, r0, r7
 8000ac6:	fa1f f38e 	uxth.w	r3, lr
 8000aca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ace:	429f      	cmp	r7, r3
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x148>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ada:	d202      	bcs.n	8000ae2 <__udivmoddi4+0x146>
 8000adc:	429f      	cmp	r7, r3
 8000ade:	f200 80ae 	bhi.w	8000c3e <__udivmoddi4+0x2a2>
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	1bdb      	subs	r3, r3, r7
 8000ae6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aea:	e7a5      	b.n	8000a38 <__udivmoddi4+0x9c>
 8000aec:	f1c1 0720 	rsb	r7, r1, #32
 8000af0:	408b      	lsls	r3, r1
 8000af2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000af6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000afa:	fa24 f607 	lsr.w	r6, r4, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fbb6 f8f9 	udiv	r8, r6, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 6618 	mls	r6, r9, r8, r6
 8000b0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b12:	408c      	lsls	r4, r1
 8000b14:	fa00 fa01 	lsl.w	sl, r0, r1
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	431c      	orrs	r4, r3
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b24:	4298      	cmp	r0, r3
 8000b26:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2a:	d90a      	bls.n	8000b42 <__udivmoddi4+0x1a6>
 8000b2c:	eb1c 0303 	adds.w	r3, ip, r3
 8000b30:	f108 36ff 	add.w	r6, r8, #4294967295
 8000b34:	f080 8081 	bcs.w	8000c3a <__udivmoddi4+0x29e>
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	d97e      	bls.n	8000c3a <__udivmoddi4+0x29e>
 8000b3c:	f1a8 0802 	sub.w	r8, r8, #2
 8000b40:	4463      	add	r3, ip
 8000b42:	1a1e      	subs	r6, r3, r0
 8000b44:	fbb6 f3f9 	udiv	r3, r6, r9
 8000b48:	fb09 6613 	mls	r6, r9, r3, r6
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b56:	45a6      	cmp	lr, r4
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x1d0>
 8000b5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b62:	d266      	bcs.n	8000c32 <__udivmoddi4+0x296>
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d964      	bls.n	8000c32 <__udivmoddi4+0x296>
 8000b68:	3b02      	subs	r3, #2
 8000b6a:	4464      	add	r4, ip
 8000b6c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000b70:	fba0 8302 	umull	r8, r3, r0, r2
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	46c6      	mov	lr, r8
 8000b7c:	461e      	mov	r6, r3
 8000b7e:	d350      	bcc.n	8000c22 <__udivmoddi4+0x286>
 8000b80:	d04d      	beq.n	8000c1e <__udivmoddi4+0x282>
 8000b82:	b155      	cbz	r5, 8000b9a <__udivmoddi4+0x1fe>
 8000b84:	ebba 030e 	subs.w	r3, sl, lr
 8000b88:	eb64 0406 	sbc.w	r4, r4, r6
 8000b8c:	fa04 f707 	lsl.w	r7, r4, r7
 8000b90:	40cb      	lsrs	r3, r1
 8000b92:	431f      	orrs	r7, r3
 8000b94:	40cc      	lsrs	r4, r1
 8000b96:	e9c5 7400 	strd	r7, r4, [r5]
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	e751      	b.n	8000a42 <__udivmoddi4+0xa6>
 8000b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	40d9      	lsrs	r1, r3
 8000ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb4:	fbb1 f0f8 	udiv	r0, r1, r8
 8000bb8:	fb08 1110 	mls	r1, r8, r0, r1
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb00 f107 	mul.w	r1, r0, r7
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x248>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bda:	d22c      	bcs.n	8000c36 <__udivmoddi4+0x29a>
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d92a      	bls.n	8000c36 <__udivmoddi4+0x29a>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bea:	fb08 3311 	mls	r3, r8, r1, r3
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb01 f307 	mul.w	r3, r1, r7
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x272>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c04:	d213      	bcs.n	8000c2e <__udivmoddi4+0x292>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d911      	bls.n	8000c2e <__udivmoddi4+0x292>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	1ae4      	subs	r4, r4, r3
 8000c10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c14:	e73b      	b.n	8000a8e <__udivmoddi4+0xf2>
 8000c16:	4604      	mov	r4, r0
 8000c18:	e6f2      	b.n	8000a00 <__udivmoddi4+0x64>
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	e708      	b.n	8000a30 <__udivmoddi4+0x94>
 8000c1e:	45c2      	cmp	sl, r8
 8000c20:	d2af      	bcs.n	8000b82 <__udivmoddi4+0x1e6>
 8000c22:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c26:	eb63 060c 	sbc.w	r6, r3, ip
 8000c2a:	3801      	subs	r0, #1
 8000c2c:	e7a9      	b.n	8000b82 <__udivmoddi4+0x1e6>
 8000c2e:	4631      	mov	r1, r6
 8000c30:	e7ed      	b.n	8000c0e <__udivmoddi4+0x272>
 8000c32:	4603      	mov	r3, r0
 8000c34:	e79a      	b.n	8000b6c <__udivmoddi4+0x1d0>
 8000c36:	4630      	mov	r0, r6
 8000c38:	e7d4      	b.n	8000be4 <__udivmoddi4+0x248>
 8000c3a:	46b0      	mov	r8, r6
 8000c3c:	e781      	b.n	8000b42 <__udivmoddi4+0x1a6>
 8000c3e:	4463      	add	r3, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	e74f      	b.n	8000ae4 <__udivmoddi4+0x148>
 8000c44:	4606      	mov	r6, r0
 8000c46:	4623      	mov	r3, r4
 8000c48:	4608      	mov	r0, r1
 8000c4a:	e711      	b.n	8000a70 <__udivmoddi4+0xd4>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	e732      	b.n	8000ab8 <__udivmoddi4+0x11c>
 8000c52:	bf00      	nop

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c6a:	4a27      	ldr	r2, [pc, #156]	@ (8000d08 <MX_ADC_Init+0xb0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c74:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c8e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cba:	2210      	movs	r2, #16
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cce:	f000 fc69 	bl	80015a4 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000cd8:	f000 f9fc 	bl	80010d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_ADC_Init+0xac>)
 8000cee:	f000 ff1f 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000cf8:	f000 f9ec 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000007c 	.word	0x2000007c
 8000d08:	40012400 	.word	0x40012400

08000d0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <HAL_ADC_MspInit+0x94>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d13b      	bne.n	8000d96 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <HAL_ADC_MspInit+0x98>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <HAL_ADC_MspInit+0x98>)
 8000d24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d28:	6213      	str	r3, [r2, #32]
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <HAL_ADC_MspInit+0x98>)
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <HAL_ADC_MspInit+0xa0>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d4a:	2280      	movs	r2, #128	@ 0x80
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000d6a:	480f      	ldr	r0, [pc, #60]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d6c:	f001 f9a4 	bl	80020b8 <HAL_DMA_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000d76:	f000 f9ad 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d80:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <HAL_ADC_MspInit+0x9c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2012      	movs	r0, #18
 8000d8c:	f001 f95d 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d90:	2012      	movs	r0, #18
 8000d92:	f001 f976 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40012400 	.word	0x40012400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	200000d0 	.word	0x200000d0
 8000dac:	40026008 	.word	0x40026008

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <MX_DMA_Init+0x48>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <MX_DMA_Init+0x48>)
 8000dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <MX_DMA_Init+0x48>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f001 f939 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd8:	200b      	movs	r0, #11
 8000dda:	f001 f952 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200e      	movs	r0, #14
 8000de4:	f001 f931 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000de8:	200e      	movs	r0, #14
 8000dea:	f001 f94a 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <MX_GPIO_Init+0xa0>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <MX_GPIO_Init+0xa0>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <MX_GPIO_Init+0xa0>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <MX_GPIO_Init+0xa0>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <MX_GPIO_Init+0xa0>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_GPIO_Init+0xa0>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	21c0      	movs	r1, #192	@ 0xc0
 8000e46:	4816      	ldr	r0, [pc, #88]	@ (8000ea0 <MX_GPIO_Init+0xa4>)
 8000e48:	f001 fcca 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <MX_GPIO_Init+0xa8>)
 8000e62:	f001 fb3d 	bl	80024e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	23c0      	movs	r3, #192	@ 0xc0
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <MX_GPIO_Init+0xa4>)
 8000e7e:	f001 fb2f 	bl	80024e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2006      	movs	r0, #6
 8000e88:	f001 f8df 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	f001 f8f8 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fb0b 	bl	80014c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f812 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f7ff ffa2 	bl	8000dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f7ff ff7a 	bl	8000db0 <MX_DMA_Init>
  MX_ADC_Init();
 8000ebc:	f7ff fecc 	bl	8000c58 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fa3c 	bl	800133c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000ec4:	f000 f9de 	bl	8001284 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <main+0x2c>)
 8000eca:	f002 fb09 	bl	80034e0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ece:	bf00      	nop
 8000ed0:	e7fd      	b.n	8000ece <main+0x26>
 8000ed2:	bf00      	nop
 8000ed4:	20000130 	.word	0x20000130

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b092      	sub	sp, #72	@ 0x48
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2234      	movs	r2, #52	@ 0x34
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fbf0 	bl	80046cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <SystemClock_Config+0x88>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000f02:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <SystemClock_Config+0x88>)
 8000f04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f08:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f12:	2310      	movs	r3, #16
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fca8 	bl	8002874 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000f2a:	f000 f8d3 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f32:	2301      	movs	r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 ffc4 	bl	8002ed4 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f52:	f000 f8bf 	bl	80010d4 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3748      	adds	r7, #72	@ 0x48
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40007000 	.word	0x40007000

08000f64 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	isSent=1 ;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_UART_TxCpltCallback+0x18>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000000 	.word	0x20000000

08000f80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d14e      	bne.n	8001030 <HAL_ADC_ConvCpltCallback+0xb0>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6) ;
 8000f92:	2140      	movs	r1, #64	@ 0x40
 8000f94:	482b      	ldr	r0, [pc, #172]	@ (8001044 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000f96:	f001 fc3b 	bl	8002810 <HAL_GPIO_TogglePin>

    while(isSent==1){
 8000f9a:	e045      	b.n	8001028 <HAL_ADC_ConvCpltCallback+0xa8>

    	Buffer_ADC[0]= HAL_ADC_GetValue(hadc);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fcb1 	bl	8001904 <HAL_ADC_GetValue>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000fa8:	701a      	strb	r2, [r3, #0]
     int temperature = (((Buffer_ADC[0] * 3.3) / 4096.0) * 100.0 )+13 ;
 8000faa:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa38 	bl	8000424 <__aeabi_i2d>
 8000fb4:	a320      	add	r3, pc, #128	@ (adr r3, 8001038 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff fa9d 	bl	80004f8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <HAL_ADC_ConvCpltCallback+0xcc>)
 8000fcc:	f7ff fbbe 	bl	800074c <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000fde:	f7ff fa8b 	bl	80004f8 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000ff0:	f7ff f8cc 	bl	800018c <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fc8e 	bl	800091c <__aeabi_d2iz>
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
     sprintf(temperatureStr, "%d \n", temperature);
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4914      	ldr	r1, [pc, #80]	@ (8001058 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001008:	4814      	ldr	r0, [pc, #80]	@ (800105c <HAL_ADC_ConvCpltCallback+0xdc>)
 800100a:	f003 fb3f 	bl	800468c <siprintf>
    if (HAL_UART_Transmit_DMA(&huart1,(uint8_t*)temperatureStr,sizeof(temperature))!= HAL_OK){
 800100e:	2204      	movs	r2, #4
 8001010:	4912      	ldr	r1, [pc, #72]	@ (800105c <HAL_ADC_ConvCpltCallback+0xdc>)
 8001012:	4813      	ldr	r0, [pc, #76]	@ (8001060 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001014:	f002 fcc6 	bl	80039a4 <HAL_UART_Transmit_DMA>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_ADC_ConvCpltCallback+0xa2>
    		 	  Error_Handler();
 800101e:	f000 f859 	bl	80010d4 <Error_Handler>
    }
    isSent=0 ;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
    while(isSent==1){
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_ADC_ConvCpltCallback+0xe4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d0b5      	beq.n	8000f9c <HAL_ADC_ConvCpltCallback+0x1c>

    }

}
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	66666666 	.word	0x66666666
 800103c:	400a6666 	.word	0x400a6666
 8001040:	40012400 	.word	0x40012400
 8001044:	40020400 	.word	0x40020400
 8001048:	20000114 	.word	0x20000114
 800104c:	40b00000 	.word	0x40b00000
 8001050:	40590000 	.word	0x40590000
 8001054:	402a0000 	.word	0x402a0000
 8001058:	08005004 	.word	0x08005004
 800105c:	20000118 	.word	0x20000118
 8001060:	20000170 	.word	0x20000170
 8001064:	20000000 	.word	0x20000000

08001068 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x2a>
       HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800107a:	2180      	movs	r1, #128	@ 0x80
 800107c:	4808      	ldr	r0, [pc, #32]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800107e:	f001 fbc7 	bl	8002810 <HAL_GPIO_TogglePin>
    if(HAL_ADC_Start_IT(&hadc)!= HAL_OK)
 8001082:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001084:	f000 fbd4 	bl	8001830 <HAL_ADC_Start_IT>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x2a>
		      {
		       Error_Handler();
 800108e:	f000 f821 	bl	80010d4 <Error_Handler>
		      }
		    }
		  }
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40001000 	.word	0x40001000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	2000007c 	.word	0x2000007c

080010a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
   if (GPIO_Pin==GPIO_PIN_0){
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d107      	bne.n	80010c8 <HAL_GPIO_EXTI_Callback+0x20>

   if(HAL_ADC_Start_IT(&hadc)!= HAL_OK)
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x28>)
 80010ba:	f000 fbb9 	bl	8001830 <HAL_ADC_Start_IT>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_GPIO_EXTI_Callback+0x20>
     {
      Error_Handler();
 80010c4:	f000 f806 	bl	80010d4 <Error_Handler>
     }
   }
 }
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000007c 	.word	0x2000007c

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_MspInit+0x5c>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_MspInit+0x5c>)
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010f0:	6253      	str	r3, [r2, #36]	@ 0x24
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_MspInit+0x5c>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_MspInit+0x5c>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <HAL_MspInit+0x5c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <HAL_MspInit+0x5c>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_MspInit+0x5c>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_MspInit+0x5c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001120:	6253      	str	r3, [r2, #36]	@ 0x24
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_MspInit+0x5c>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112e:	2007      	movs	r0, #7
 8001130:	f000 ff80 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f9ec 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800119c:	2001      	movs	r0, #1
 800119e:	f001 fb51 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <DMA1_Channel1_IRQHandler+0x10>)
 80011ae:	f001 f8b9 	bl	8002324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000d0 	.word	0x200000d0

080011bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DMA1_Channel4_IRQHandler+0x10>)
 80011c2:	f001 f8af 	bl	8002324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001b8 	.word	0x200001b8

080011d0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <ADC1_IRQHandler+0x10>)
 80011d6:	f000 fba1 	bl	800191c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000007c 	.word	0x2000007c

080011e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <USART1_IRQHandler+0x10>)
 80011ea:	f002 fc4b 	bl	8003a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000170 	.word	0x20000170

080011f8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM6_IRQHandler+0x10>)
 80011fe:	f002 f9c1 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000130 	.word	0x20000130

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f003 fa4e 	bl	80046dc <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20004000 	.word	0x20004000
 800126c:	00000400 	.word	0x00000400
 8001270:	2000012c 	.word	0x2000012c
 8001274:	20000348 	.word	0x20000348

08001278 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_TIM6_Init+0x64>)
 8001294:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <MX_TIM6_Init+0x68>)
 8001296:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3000;
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <MX_TIM6_Init+0x64>)
 800129a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800129e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_TIM6_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 42652;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_TIM6_Init+0x64>)
 80012a8:	f24a 629c 	movw	r2, #42652	@ 0xa69c
 80012ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_TIM6_Init+0x64>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_TIM6_Init+0x64>)
 80012b6:	f002 f8d3 	bl	8003460 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012c0:	f7ff ff08 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012c4:	2320      	movs	r3, #32
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_TIM6_Init+0x64>)
 80012d2:	f002 fab9 	bl	8003848 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012dc:	f7ff fefa 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000130 	.word	0x20000130
 80012ec:	40001000 	.word	0x40001000

080012f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <HAL_TIM_Base_MspInit+0x44>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d113      	bne.n	800132a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_TIM_Base_MspInit+0x48>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <HAL_TIM_Base_MspInit+0x48>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6253      	str	r3, [r2, #36]	@ 0x24
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_TIM_Base_MspInit+0x48>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	202b      	movs	r0, #43	@ 0x2b
 8001320:	f000 fe93 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001324:	202b      	movs	r0, #43	@ 0x2b
 8001326:	f000 feac 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40001000 	.word	0x40001000
 8001338:	40023800 	.word	0x40023800

0800133c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <MX_USART1_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001362:	2208      	movs	r2, #8
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 800136e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001372:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <MX_USART1_UART_Init+0x4c>)
 8001376:	f002 fac5 	bl	8003904 <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001380:	f7ff fea8 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000170 	.word	0x20000170
 800138c:	40013800 	.word	0x40013800

08001390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001468 <HAL_UART_MspInit+0xd8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d156      	bne.n	8001460 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <HAL_UART_MspInit+0xdc>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a2d      	ldr	r2, [pc, #180]	@ (800146c <HAL_UART_MspInit+0xdc>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_UART_MspInit+0xdc>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_UART_MspInit+0xdc>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_UART_MspInit+0xdc>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <HAL_UART_MspInit+0xdc>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2307      	movs	r3, #7
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	481c      	ldr	r0, [pc, #112]	@ (8001470 <HAL_UART_MspInit+0xe0>)
 8001400:	f001 f86e 	bl	80024e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <HAL_UART_MspInit+0xe8>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 800140c:	2210      	movs	r2, #16
 800140e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001418:	2280      	movs	r2, #128	@ 0x80
 800141a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001434:	480f      	ldr	r0, [pc, #60]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001436:	f000 fe3f 	bl	80020b8 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001440:	f7ff fe48 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 8001448:	639a      	str	r2, [r3, #56]	@ 0x38
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_UART_MspInit+0xe4>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2025      	movs	r0, #37	@ 0x25
 8001456:	f000 fdf8 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800145a:	2025      	movs	r0, #37	@ 0x25
 800145c:	f000 fe11 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	@ 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40013800 	.word	0x40013800
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	200001b8 	.word	0x200001b8
 8001478:	40026044 	.word	0x40026044

0800147c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff fefc 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001482:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001498:	4c09      	ldr	r4, [pc, #36]	@ (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f003 f91f 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fcfd 	bl	8000ea8 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014b8:	08005074 	.word	0x08005074
  ldr r2, =_sbss
 80014bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014c0:	20000348 	.word	0x20000348

080014c4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <COMP_IRQHandler>

080014c6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 fdaf 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f80e 	bl	80014f8 <HAL_InitTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	71fb      	strb	r3, [r7, #7]
 80014e6:	e001      	b.n	80014ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e8:	f7ff fdfa 	bl	80010e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_InitTick+0x68>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d022      	beq.n	8001552 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_InitTick+0x6c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_InitTick+0x68>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001518:	fbb1 f3f3 	udiv	r3, r1, r3
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fdbc 	bl	800209e <HAL_SYSTICK_Config>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10f      	bne.n	800154c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d809      	bhi.n	8001546 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001532:	2200      	movs	r2, #0
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	f04f 30ff 	mov.w	r0, #4294967295
 800153a:	f000 fd86 	bl	800204a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_InitTick+0x70>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e007      	b.n	8001556 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e004      	b.n	8001556 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000000c 	.word	0x2000000c
 8001564:	20000004 	.word	0x20000004
 8001568:	20000008 	.word	0x20000008

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <HAL_IncTick+0x1c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_IncTick+0x20>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a03      	ldr	r2, [pc, #12]	@ (8001588 <HAL_IncTick+0x1c>)
 800157c:	6013      	str	r3, [r2, #0]
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200001fc 	.word	0x200001fc
 800158c:	2000000c 	.word	0x2000000c

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b02      	ldr	r3, [pc, #8]	@ (80015a0 <HAL_GetTick+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	200001fc 	.word	0x200001fc

080015a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	@ 0x38
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e127      	b.n	8001814 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d115      	bne.n	80015fe <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e0:	4b8e      	ldr	r3, [pc, #568]	@ (800181c <HAL_ADC_Init+0x278>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a8d      	ldr	r2, [pc, #564]	@ (800181c <HAL_ADC_Init+0x278>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4b8b      	ldr	r3, [pc, #556]	@ (800181c <HAL_ADC_Init+0x278>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fb87 	bl	8000d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 80ff 	bne.w	800180a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001614:	f023 0302 	bic.w	r3, r3, #2
 8001618:	f043 0202 	orr.w	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001620:	4b7f      	ldr	r3, [pc, #508]	@ (8001820 <HAL_ADC_Init+0x27c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	497c      	ldr	r1, [pc, #496]	@ (8001820 <HAL_ADC_Init+0x27c>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800163a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001642:	4619      	mov	r1, r3
 8001644:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001648:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800165e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001664:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	2302      	movs	r3, #2
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001686:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800168a:	4313      	orrs	r3, r2
 800168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001692:	2b10      	cmp	r3, #16
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800169e:	4313      	orrs	r3, r2
 80016a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a2:	4313      	orrs	r3, r2
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b0:	2b40      	cmp	r3, #64	@ 0x40
 80016b2:	d04f      	beq.n	8001754 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ba:	4313      	orrs	r3, r2
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016c6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6912      	ldr	r2, [r2, #16]
 80016cc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80016d0:	d003      	beq.n	80016da <HAL_ADC_Init+0x136>
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6912      	ldr	r2, [r2, #16]
 80016d6:	2a01      	cmp	r2, #1
 80016d8:	d102      	bne.n	80016e0 <HAL_ADC_Init+0x13c>
 80016da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016de:	e000      	b.n	80016e2 <HAL_ADC_Init+0x13e>
 80016e0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80016e2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016e6:	4313      	orrs	r3, r2
 80016e8:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d125      	bne.n	8001740 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d114      	bne.n	8001728 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	3b01      	subs	r3, #1
 8001704:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	fa92 f2a2 	rbit	r2, r2
 8001710:	617a      	str	r2, [r7, #20]
  return result;
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	fab2 f282 	clz	r2, r2
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	4093      	lsls	r3, r2
 800171c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001722:	4313      	orrs	r3, r2
 8001724:	633b      	str	r3, [r7, #48]	@ 0x30
 8001726:	e00b      	b.n	8001740 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172c:	f043 0220 	orr.w	r2, r3, #32
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <HAL_ADC_Init+0x280>)
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001750:	430b      	orrs	r3, r1
 8001752:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <HAL_ADC_Init+0x284>)
 800175c:	4013      	ands	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001764:	430b      	orrs	r3, r1
 8001766:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001770:	d003      	beq.n	800177a <HAL_ADC_Init+0x1d6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d119      	bne.n	80017ae <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800178e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	60fa      	str	r2, [r7, #12]
  return result;
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	fab2 f282 	clz	r2, r2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	fa03 f202 	lsl.w	r2, r3, r2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ac:	e007      	b.n	80017be <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_ADC_Init+0x288>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d10b      	bne.n	80017e6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	f023 0303 	bic.w	r3, r3, #3
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017e4:	e014      	b.n	8001810 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f023 0312 	bic.w	r3, r3, #18
 80017ee:	f043 0210 	orr.w	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001808:	e002      	b.n	8001810 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001810:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001814:	4618      	mov	r0, r3
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40012700 	.word	0x40012700
 8001824:	fcfc16ff 	.word	0xfcfc16ff
 8001828:	c0fff18d 	.word	0xc0fff18d
 800182c:	bf80fffe 	.word	0xbf80fffe

08001830 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_Start_IT+0x1a>
 8001846:	2302      	movs	r3, #2
 8001848:	e058      	b.n	80018fc <HAL_ADC_Start_IT+0xcc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fabc 	bl	8001dd0 <ADC_Enable>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d14b      	bne.n	80018fa <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001888:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800188c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a0:	d106      	bne.n	80018b0 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a6:	f023 0206 	bic.w	r2, r3, #6
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80018ae:	e002      	b.n	80018b6 <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018f8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b00      	cmp	r3, #0
 800193c:	d04c      	beq.n	80019d8 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d047      	beq.n	80019d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d12c      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d127      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001990:	2b00      	cmp	r3, #0
 8001992:	d119      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0220 	bic.w	r2, r2, #32
 80019a2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fad9 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f06f 0212 	mvn.w	r2, #18
 80019d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d05a      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d055      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13a      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12c      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d125      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d11e      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d119      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f9fd 	bl	8001e88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f06f 020c 	mvn.w	r2, #12
 8001a96:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d012      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f826 	bl	8001b0a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f06f 0201 	mvn.w	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d017      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae0:	f043 0202 	orr.w	r2, r3, #2
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0220 	mvn.w	r2, #32
 8001af0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f812 	bl	8001b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0220 	mvn.w	r2, #32
 8001b00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x20>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e134      	b.n	8001dba <HAL_ADC_ConfigChannel+0x28a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d81c      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b05      	subs	r3, #5
 8001b72:	221f      	movs	r2, #31
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4019      	ands	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b05      	subs	r3, #5
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b98:	e07e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d81c      	bhi.n	8001bdc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b23      	subs	r3, #35	@ 0x23
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4019      	ands	r1, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b23      	subs	r3, #35	@ 0x23
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bda:	e05d      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d81c      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b41      	subs	r3, #65	@ 0x41
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b41      	subs	r3, #65	@ 0x41
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c1c:	e03c      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b18      	cmp	r3, #24
 8001c24:	d81c      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b5f      	subs	r3, #95	@ 0x5f
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4019      	ands	r1, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b5f      	subs	r3, #95	@ 0x5f
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c5e:	e01b      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b7d      	subs	r3, #125	@ 0x7d
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4019      	ands	r1, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b7d      	subs	r3, #125	@ 0x7d
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d81a      	bhi.n	8001cd6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6959      	ldr	r1, [r3, #20]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	4019      	ands	r1, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6898      	ldr	r0, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	e042      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b13      	cmp	r3, #19
 8001cdc:	d81c      	bhi.n	8001d18 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	3b1e      	subs	r3, #30
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4019      	ands	r1, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6898      	ldr	r0, [r3, #8]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	3b1e      	subs	r3, #30
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	e021      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b1a      	cmp	r3, #26
 8001d1e:	d81c      	bhi.n	8001d5a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b3c      	subs	r3, #60	@ 0x3c
 8001d32:	2207      	movs	r2, #7
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6898      	ldr	r0, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b3c      	subs	r3, #60	@ 0x3c
 8001d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	e000      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001d5a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d003      	beq.n	8001d6c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d68:	2b11      	cmp	r3, #17
 8001d6a:	d121      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x294>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11b      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x294>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x294>)
 8001d7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d82:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d111      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x298>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0e      	ldr	r2, [pc, #56]	@ (8001dcc <HAL_ADC_ConfigChannel+0x29c>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0c9a      	lsrs	r2, r3, #18
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001da2:	e002      	b.n	8001daa <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f9      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40012700 	.word	0x40012700
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dea:	2b40      	cmp	r3, #64	@ 0x40
 8001dec:	d043      	beq.n	8001e76 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <ADC_Enable+0xb0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <ADC_Enable+0xb4>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9a      	lsrs	r2, r3, #18
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e12:	e002      	b.n	8001e1a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001e20:	f7ff fbb6 	bl	8001590 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e26:	e01f      	b.n	8001e68 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001e28:	f7ff fbb2 	bl	8001590 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d918      	bls.n	8001e68 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e40:	2b40      	cmp	r3, #64	@ 0x40
 8001e42:	d011      	beq.n	8001e68 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e007      	b.n	8001e78 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	d1d8      	bne.n	8001e28 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000004 	.word	0x20000004
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
	...

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	@ (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff90 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff2d 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff42 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff90 	bl	8001f8c <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5f 	bl	8001f38 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff35 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e043      	b.n	8002152 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b22      	ldr	r3, [pc, #136]	@ (800215c <HAL_DMA_Init+0xa4>)
 80020d2:	4413      	add	r3, r2
 80020d4:	4a22      	ldr	r2, [pc, #136]	@ (8002160 <HAL_DMA_Init+0xa8>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	009a      	lsls	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_DMA_Init+0xac>)
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002102:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800210c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	bffd9ff8 	.word	0xbffd9ff8
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	40026000 	.word	0x40026000

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Start_IT+0x20>
 8002184:	2302      	movs	r3, #2
 8002186:	e04b      	b.n	8002220 <HAL_DMA_Start_IT+0xb8>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d13a      	bne.n	8002212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f95e 	bl	8002482 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 020e 	orr.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e00f      	b.n	8002200 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0204 	bic.w	r2, r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 020a 	orr.w	r2, r2, #10
 80021fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e022      	b.n	8002298 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020e 	bic.w	r2, r2, #14
 8002260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 021c 	and.w	r2, r3, #28
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f202 	lsl.w	r2, r1, r2
 8002284:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d005      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e029      	b.n	800231a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 020e 	bic.w	r2, r2, #14
 80022d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f003 021c 	and.w	r2, r3, #28
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    }
  }
  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f003 031c 	and.w	r3, r3, #28
 8002344:	2204      	movs	r2, #4
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d026      	beq.n	800239e <HAL_DMA_IRQHandler+0x7a>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d021      	beq.n	800239e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f003 021c 	and.w	r2, r3, #28
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2104      	movs	r1, #4
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d071      	beq.n	8002478 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800239c:	e06c      	b.n	8002478 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 031c 	and.w	r3, r3, #28
 80023a6:	2202      	movs	r2, #2
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d02e      	beq.n	8002410 <HAL_DMA_IRQHandler+0xec>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d029      	beq.n	8002410 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 020a 	bic.w	r2, r2, #10
 80023d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f003 021c 	and.w	r2, r3, #28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ee:	2102      	movs	r1, #2
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d038      	beq.n	8002478 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800240e:	e033      	b.n	8002478 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f003 031c 	and.w	r3, r3, #28
 8002418:	2208      	movs	r2, #8
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02a      	beq.n	800247a <HAL_DMA_IRQHandler+0x156>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d025      	beq.n	800247a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 020e 	bic.w	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 021c 	and.w	r2, r3, #28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002478:	bf00      	nop
 800247a:	bf00      	nop
}
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f003 021c 	and.w	r2, r3, #28
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d108      	bne.n	80024c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024c4:	e007      	b.n	80024d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	60da      	str	r2, [r3, #12]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024f6:	e154      	b.n	80027a2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8146 	beq.w	800279c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d005      	beq.n	8002528 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002524:	2b02      	cmp	r3, #2
 8002526:	d130      	bne.n	800258a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800255e:	2201      	movs	r2, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0201 	and.w	r2, r3, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b03      	cmp	r3, #3
 8002594:	d017      	beq.n	80025c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d123      	bne.n	800261a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	6939      	ldr	r1, [r7, #16]
 8002616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0203 	and.w	r2, r3, #3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a0 	beq.w	800279c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265c:	4b58      	ldr	r3, [pc, #352]	@ (80027c0 <HAL_GPIO_Init+0x2e0>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a57      	ldr	r2, [pc, #348]	@ (80027c0 <HAL_GPIO_Init+0x2e0>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	4b55      	ldr	r3, [pc, #340]	@ (80027c0 <HAL_GPIO_Init+0x2e0>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002674:	4a53      	ldr	r2, [pc, #332]	@ (80027c4 <HAL_GPIO_Init+0x2e4>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <HAL_GPIO_Init+0x2e8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d019      	beq.n	80026d4 <HAL_GPIO_Init+0x1f4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a4a      	ldr	r2, [pc, #296]	@ (80027cc <HAL_GPIO_Init+0x2ec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_GPIO_Init+0x1f0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a49      	ldr	r2, [pc, #292]	@ (80027d0 <HAL_GPIO_Init+0x2f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00d      	beq.n	80026cc <HAL_GPIO_Init+0x1ec>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a48      	ldr	r2, [pc, #288]	@ (80027d4 <HAL_GPIO_Init+0x2f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <HAL_GPIO_Init+0x1e8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a47      	ldr	r2, [pc, #284]	@ (80027d8 <HAL_GPIO_Init+0x2f8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_GPIO_Init+0x1e4>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e008      	b.n	80026d6 <HAL_GPIO_Init+0x1f6>
 80026c4:	2305      	movs	r3, #5
 80026c6:	e006      	b.n	80026d6 <HAL_GPIO_Init+0x1f6>
 80026c8:	2303      	movs	r3, #3
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1f6>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1f6>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1f6>
 80026d4:	2300      	movs	r3, #0
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026e6:	4937      	ldr	r1, [pc, #220]	@ (80027c4 <HAL_GPIO_Init+0x2e4>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f4:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002718:	4a30      	ldr	r2, [pc, #192]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271e:	4b2f      	ldr	r3, [pc, #188]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002742:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002748:	4b24      	ldr	r3, [pc, #144]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800276c:	4a1b      	ldr	r2, [pc, #108]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002796:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f aea3 	bne.w	80024f8 <HAL_GPIO_Init+0x18>
  }
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43d9      	mvns	r1, r3
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	400b      	ands	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800284e:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc20 	bl	80010a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40010400 	.word	0x40010400

08002874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e31d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002886:	4b94      	ldr	r3, [pc, #592]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002890:	4b91      	ldr	r3, [pc, #580]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d07b      	beq.n	800299e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d006      	beq.n	80028ba <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d10f      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5e>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b8:	d10b      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	4b87      	ldr	r3, [pc, #540]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06a      	beq.n	800299c <HAL_RCC_OscConfig+0x128>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d166      	bne.n	800299c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e2f7      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e02d      	b.n	8002944 <HAL_RCC_OscConfig+0xd0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10c      	bne.n	800290a <HAL_RCC_OscConfig+0x96>
 80028f0:	4b79      	ldr	r3, [pc, #484]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a78      	ldr	r2, [pc, #480]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a75      	ldr	r2, [pc, #468]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0xd0>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0xb8>
 8002912:	4b71      	ldr	r3, [pc, #452]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a70      	ldr	r2, [pc, #448]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6d      	ldr	r2, [pc, #436]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xd0>
 800292c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a69      	ldr	r2, [pc, #420]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b67      	ldr	r3, [pc, #412]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a66      	ldr	r2, [pc, #408]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fe20 	bl	8001590 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe fe1c 	bl	8001590 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e2ad      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002966:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fe0c 	bl	8001590 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fe08 	bl	8001590 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	@ 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e299      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800298e:	4b52      	ldr	r3, [pc, #328]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d05a      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_OscConfig+0x176>
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029bc:	4b46      	ldr	r3, [pc, #280]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x160>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e276      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b40      	ldr	r3, [pc, #256]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	493d      	ldr	r1, [pc, #244]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e8:	e03a      	b.n	8002a60 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCC_OscConfig+0x268>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fdca 	bl	8001590 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fdc6 	bl	8001590 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e257      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	492a      	ldr	r1, [pc, #168]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a34:	4b29      	ldr	r3, [pc, #164]	@ (8002adc <HAL_RCC_OscConfig+0x268>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fda9 	bl	8001590 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe fda5 	bl	8001590 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e236      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a54:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80b8 	beq.w	8002bde <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d170      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x218>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e21a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d921      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fc7d 	bl	80033a0 <RCC_SetFlashLatencyFromMSIRange>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e208      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4906      	ldr	r1, [pc, #24]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	4901      	ldr	r1, [pc, #4]	@ (8002ad8 <HAL_RCC_OscConfig+0x264>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
 8002ad6:	e020      	b.n	8002b1a <HAL_RCC_OscConfig+0x2a6>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae0:	4b99      	ldr	r3, [pc, #612]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4996      	ldr	r1, [pc, #600]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af2:	4b95      	ldr	r3, [pc, #596]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	4991      	ldr	r1, [pc, #580]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fc48 	bl	80033a0 <RCC_SetFlashLatencyFromMSIRange>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1d3      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	3301      	adds	r3, #1
 8002b22:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b2a:	4a87      	ldr	r2, [pc, #540]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002b2c:	6892      	ldr	r2, [r2, #8]
 8002b2e:	0912      	lsrs	r2, r2, #4
 8002b30:	f002 020f 	and.w	r2, r2, #15
 8002b34:	4985      	ldr	r1, [pc, #532]	@ (8002d4c <HAL_RCC_OscConfig+0x4d8>)
 8002b36:	5c8a      	ldrb	r2, [r1, r2]
 8002b38:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b3a:	4a85      	ldr	r2, [pc, #532]	@ (8002d50 <HAL_RCC_OscConfig+0x4dc>)
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b3e:	4b85      	ldr	r3, [pc, #532]	@ (8002d54 <HAL_RCC_OscConfig+0x4e0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fcd8 	bl	80014f8 <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d045      	beq.n	8002bde <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	e1b5      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d029      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d58 <HAL_RCC_OscConfig+0x4e4>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fd14 	bl	8001590 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fd10 	bl	8001590 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1a1      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b7e:	4b72      	ldr	r3, [pc, #456]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	496c      	ldr	r1, [pc, #432]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	4967      	ldr	r1, [pc, #412]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb2:	4b69      	ldr	r3, [pc, #420]	@ (8002d58 <HAL_RCC_OscConfig+0x4e4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fcea 	bl	8001590 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fce6 	bl	8001590 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e177      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d030      	beq.n	8002c4c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fcca 	bl	8001590 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe fcc6 	bl	8001590 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e157      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c12:	4b4d      	ldr	r3, [pc, #308]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x38c>
 8002c1e:	e015      	b.n	8002c4c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c20:	4b4e      	ldr	r3, [pc, #312]	@ (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe fcb3 	bl	8001590 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fcaf 	bl	8001590 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e140      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c40:	4b41      	ldr	r3, [pc, #260]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80b5 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	4a36      	ldr	r2, [pc, #216]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c74:	6253      	str	r3, [r2, #36]	@ 0x24
 8002c76:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fc77 	bl	8001590 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fc73 	bl	8001590 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	@ 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e104      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x466>
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd6:	6353      	str	r3, [r2, #52]	@ 0x34
 8002cd8:	e02d      	b.n	8002d36 <HAL_RCC_OscConfig+0x4c2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x488>
 8002ce2:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cec:	6353      	str	r3, [r2, #52]	@ 0x34
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf2:	4a15      	ldr	r2, [pc, #84]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002cf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cf8:	6353      	str	r3, [r2, #52]	@ 0x34
 8002cfa:	e01c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4c2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4aa>
 8002d04:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d08:	4a0f      	ldr	r2, [pc, #60]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d10:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d14:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4c2>
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d22:	4a09      	ldr	r2, [pc, #36]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d28:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	4a06      	ldr	r2, [pc, #24]	@ (8002d48 <HAL_RCC_OscConfig+0x4d4>)
 8002d30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d34:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d024      	beq.n	8002d88 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fc27 	bl	8001590 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d44:	e019      	b.n	8002d7a <HAL_RCC_OscConfig+0x506>
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	08005018 	.word	0x08005018
 8002d50:	20000004 	.word	0x20000004
 8002d54:	20000008 	.word	0x20000008
 8002d58:	42470020 	.word	0x42470020
 8002d5c:	42470680 	.word	0x42470680
 8002d60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fc14 	bl	8001590 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0a3      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d7a:	4b54      	ldr	r3, [pc, #336]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ee      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4f0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fc02 	bl	8001590 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe fbfe 	bl	8001590 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e08d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da6:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ee      	bne.n	8002d90 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b44      	ldr	r3, [pc, #272]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	4a43      	ldr	r2, [pc, #268]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d079      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d056      	beq.n	8002e80 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d13b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed0 <HAL_RCC_OscConfig+0x65c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fbd6 	bl	8001590 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fbd2 	bl	8001590 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e063      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	4319      	orrs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	492b      	ldr	r1, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed0 <HAL_RCC_OscConfig+0x65c>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fbb1 	bl	8001590 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe fbad 	bl	8001590 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e03e      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e44:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x5be>
 8002e50:	e036      	b.n	8002ec0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed0 <HAL_RCC_OscConfig+0x65c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fb9a 	bl	8001590 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fb96 	bl	8001590 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e027      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e72:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5ec>
 8002e7e:	e01f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e01a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_RCC_OscConfig+0x658>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470060 	.word	0x42470060

08002ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e11a      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d919      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x34>
 8002efc:	4b8a      	ldr	r3, [pc, #552]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a89      	ldr	r2, [pc, #548]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b87      	ldr	r3, [pc, #540]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 0201 	bic.w	r2, r3, #1
 8002f10:	4985      	ldr	r1, [pc, #532]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f18:	4b83      	ldr	r3, [pc, #524]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0f9      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f36:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	497a      	ldr	r1, [pc, #488]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 808e 	beq.w	8003072 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f5e:	4b73      	ldr	r3, [pc, #460]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0d7      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f76:	4b6d      	ldr	r3, [pc, #436]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d115      	bne.n	8002fae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0cb      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f8e:	4b67      	ldr	r3, [pc, #412]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0bf      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0b7      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	495c      	ldr	r1, [pc, #368]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fae6 	bl	8001590 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d112      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe fade 	bl	8001590 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e09b      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe6:	4b51      	ldr	r3, [pc, #324]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xfc>
 8002ff2:	e03e      	b.n	8003072 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fe fac7 	bl	8001590 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e084      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003014:	4b45      	ldr	r3, [pc, #276]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d1ee      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x12a>
 8003020:	e027      	b.n	8003072 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d11d      	bne.n	8003066 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fe fab0 	bl	8001590 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e06d      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003042:	4b3a      	ldr	r3, [pc, #232]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b04      	cmp	r3, #4
 800304c:	d1ee      	bne.n	800302c <HAL_RCC_ClockConfig+0x158>
 800304e:	e010      	b.n	8003072 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fe fa9e 	bl	8001590 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e05b      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003066:	4b31      	ldr	r3, [pc, #196]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d219      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1be>
 8003086:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a27      	ldr	r2, [pc, #156]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0201 	bic.w	r2, r3, #1
 800309a:	4923      	ldr	r1, [pc, #140]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <HAL_RCC_ClockConfig+0x254>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e034      	b.n	800311e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4917      	ldr	r1, [pc, #92]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490f      	ldr	r1, [pc, #60]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f823 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <HAL_RCC_ClockConfig+0x258>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490b      	ldr	r1, [pc, #44]	@ (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a0a      	ldr	r2, [pc, #40]	@ (8003134 <HAL_RCC_ClockConfig+0x260>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <HAL_RCC_ClockConfig+0x264>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f9f0 	bl	80014f8 <HAL_InitTick>
 8003118:	4603      	mov	r3, r0
 800311a:	72fb      	strb	r3, [r7, #11]

  return status;
 800311c:	7afb      	ldrb	r3, [r7, #11]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00
 800312c:	40023800 	.word	0x40023800
 8003130:	08005018 	.word	0x08005018
 8003134:	20000004 	.word	0x20000004
 8003138:	20000008 	.word	0x20000008

0800313c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003140:	b092      	sub	sp, #72	@ 0x48
 8003142:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003144:	4b79      	ldr	r3, [pc, #484]	@ (800332c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d00d      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 8003154:	2b0c      	cmp	r3, #12
 8003156:	f200 80d5 	bhi.w	8003304 <HAL_RCC_GetSysClockFreq+0x1c8>
 800315a:	2b04      	cmp	r3, #4
 800315c:	d002      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x28>
 800315e:	2b08      	cmp	r3, #8
 8003160:	d003      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x2e>
 8003162:	e0cf      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b72      	ldr	r3, [pc, #456]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003166:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003168:	e0da      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800316a:	4b72      	ldr	r3, [pc, #456]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800316c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800316e:	e0d7      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	4b6f      	ldr	r3, [pc, #444]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003180:	0d9b      	lsrs	r3, r3, #22
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800318a:	4b68      	ldr	r3, [pc, #416]	@ (800332c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d05d      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	2200      	movs	r2, #0
 800319a:	4618      	mov	r0, r3
 800319c:	4611      	mov	r1, r2
 800319e:	4604      	mov	r4, r0
 80031a0:	460d      	mov	r5, r1
 80031a2:	4622      	mov	r2, r4
 80031a4:	462b      	mov	r3, r5
 80031a6:	f04f 0000 	mov.w	r0, #0
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	0159      	lsls	r1, r3, #5
 80031b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b4:	0150      	lsls	r0, r2, #5
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4621      	mov	r1, r4
 80031bc:	1a51      	subs	r1, r2, r1
 80031be:	6139      	str	r1, [r7, #16]
 80031c0:	4629      	mov	r1, r5
 80031c2:	eb63 0301 	sbc.w	r3, r3, r1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d4:	4659      	mov	r1, fp
 80031d6:	018b      	lsls	r3, r1, #6
 80031d8:	4651      	mov	r1, sl
 80031da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031de:	4651      	mov	r1, sl
 80031e0:	018a      	lsls	r2, r1, #6
 80031e2:	46d4      	mov	ip, sl
 80031e4:	ebb2 080c 	subs.w	r8, r2, ip
 80031e8:	4659      	mov	r1, fp
 80031ea:	eb63 0901 	sbc.w	r9, r3, r1
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003202:	4690      	mov	r8, r2
 8003204:	4699      	mov	r9, r3
 8003206:	4623      	mov	r3, r4
 8003208:	eb18 0303 	adds.w	r3, r8, r3
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	462b      	mov	r3, r5
 8003210:	eb49 0303 	adc.w	r3, r9, r3
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003222:	4629      	mov	r1, r5
 8003224:	024b      	lsls	r3, r1, #9
 8003226:	4620      	mov	r0, r4
 8003228:	4629      	mov	r1, r5
 800322a:	4604      	mov	r4, r0
 800322c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003230:	4601      	mov	r1, r0
 8003232:	024a      	lsls	r2, r1, #9
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	2200      	movs	r2, #0
 800323c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800323e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003244:	f7fd fb92 	bl	800096c <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003250:	e055      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003254:	2200      	movs	r2, #0
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	627a      	str	r2, [r7, #36]	@ 0x24
 800325a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800325e:	4642      	mov	r2, r8
 8003260:	464b      	mov	r3, r9
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	0159      	lsls	r1, r3, #5
 800326c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003270:	0150      	lsls	r0, r2, #5
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	46c4      	mov	ip, r8
 8003278:	ebb2 0a0c 	subs.w	sl, r2, ip
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	468c      	mov	ip, r1
 8003282:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003292:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003296:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800329a:	ebb2 040a 	subs.w	r4, r2, sl
 800329e:	eb63 050b 	sbc.w	r5, r3, fp
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	00eb      	lsls	r3, r5, #3
 80032ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b0:	00e2      	lsls	r2, r4, #3
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	18e3      	adds	r3, r4, r3
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	eb45 0303 	adc.w	r3, r5, r3
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032d0:	4629      	mov	r1, r5
 80032d2:	028b      	lsls	r3, r1, #10
 80032d4:	4620      	mov	r0, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	4604      	mov	r4, r0
 80032da:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80032de:	4601      	mov	r1, r0
 80032e0:	028a      	lsls	r2, r1, #10
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	2200      	movs	r2, #0
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	61fa      	str	r2, [r7, #28]
 80032ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f2:	f7fd fb3b 	bl	800096c <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4613      	mov	r3, r2
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80032fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003300:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003302:	e00d      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0b5b      	lsrs	r3, r3, #13
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	3301      	adds	r3, #1
 8003314:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800331e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8003322:	4618      	mov	r0, r3
 8003324:	3748      	adds	r7, #72	@ 0x48
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	00f42400 	.word	0x00f42400
 8003334:	007a1200 	.word	0x007a1200
 8003338:	0800500c 	.word	0x0800500c

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	@ (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	@ (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	08005028 	.word	0x08005028

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffde 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	@ (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08005028 	.word	0x08005028

080033a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80033ac:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d12c      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033b8:	4b26      	ldr	r3, [pc, #152]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033c4:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e016      	b.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033da:	6253      	str	r3, [r2, #36]	@ 0x24
 80033dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80033f0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003404:	d105      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800340c:	d101      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800340e:	2301      	movs	r3, #1
 8003410:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0f      	ldr	r2, [pc, #60]	@ (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 0201 	bic.w	r2, r3, #1
 800342c:	490b      	ldr	r1, [pc, #44]	@ (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40007000 	.word	0x40007000
 800345c:	40023c00 	.word	0x40023c00

08003460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e031      	b.n	80034d6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd ff32 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f000 f970 	bl	8003784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d001      	beq.n	80034f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e03a      	b.n	800356e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d00e      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x58>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <HAL_TIM_Base_Start_IT+0x98>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x58>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a14      	ldr	r2, [pc, #80]	@ (800357c <HAL_TIM_Base_Start_IT+0x9c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x58>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a13      	ldr	r2, [pc, #76]	@ (8003580 <HAL_TIM_Base_Start_IT+0xa0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d111      	bne.n	800355c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b06      	cmp	r3, #6
 8003548:	d010      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	e007      	b.n	800356c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40010800 	.word	0x40010800

08003584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0202 	mvn.w	r2, #2
 80035b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8c1 	bl	800374e <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8b4 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8c3 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f897 	bl	800374e <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f88a 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f899 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b08      	cmp	r3, #8
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0208 	mvn.w	r2, #8
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2204      	movs	r2, #4
 800365e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f86d 	bl	800374e <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f860 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f86f 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b10      	cmp	r3, #16
 8003694:	d122      	bne.n	80036dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d11b      	bne.n	80036dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0210 	mvn.w	r2, #16
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2208      	movs	r2, #8
 80036b2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f843 	bl	800374e <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f836 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f845 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0201 	mvn.w	r2, #1
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fcb0 	bl	8001068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003712:	2b40      	cmp	r3, #64	@ 0x40
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003720:	2b40      	cmp	r3, #64	@ 0x40
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f81f 	bl	8003772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379a:	d007      	beq.n	80037ac <TIM_Base_SetConfig+0x28>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a25      	ldr	r2, [pc, #148]	@ (8003834 <TIM_Base_SetConfig+0xb0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0x28>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <TIM_Base_SetConfig+0xb4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c4:	d013      	beq.n	80037ee <TIM_Base_SetConfig+0x6a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <TIM_Base_SetConfig+0xb0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_Base_SetConfig+0x6a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <TIM_Base_SetConfig+0xb4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_Base_SetConfig+0x6a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <TIM_Base_SetConfig+0xb8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0x6a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <TIM_Base_SetConfig+0xbc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0x6a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a16      	ldr	r2, [pc, #88]	@ (8003844 <TIM_Base_SetConfig+0xc0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40010800 	.word	0x40010800
 8003840:	40010c00 	.word	0x40010c00
 8003844:	40011000 	.word	0x40011000

08003848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e046      	b.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a12      	ldr	r2, [pc, #72]	@ (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a10      	ldr	r2, [pc, #64]	@ (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d10c      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40010800 	.word	0x40010800

08003904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e042      	b.n	800399c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fd30 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	@ 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fdbb 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800395c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800396c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800397c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	@ 0x30
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d156      	bne.n	8003a6c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_UART_Transmit_DMA+0x26>
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e04f      	b.n	8003a6e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	88fa      	ldrh	r2, [r7, #6]
 80039de:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2221      	movs	r2, #33	@ 0x21
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	4a21      	ldr	r2, [pc, #132]	@ (8003a78 <HAL_UART_Transmit_DMA+0xd4>)
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	4a20      	ldr	r2, [pc, #128]	@ (8003a7c <HAL_UART_Transmit_DMA+0xd8>)
 80039fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <HAL_UART_Transmit_DMA+0xdc>)
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3304      	adds	r3, #4
 8003a22:	461a      	mov	r2, r3
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	f7fe fb9f 	bl	8002168 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3314      	adds	r3, #20
 8003a3a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	617b      	str	r3, [r7, #20]
   return(result);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3314      	adds	r3, #20
 8003a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a54:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a56:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e5      	bne.n	8003a34 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3730      	adds	r7, #48	@ 0x30
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	08003ff5 	.word	0x08003ff5
 8003a7c:	0800408f 	.word	0x0800408f
 8003a80:	080040ab 	.word	0x080040ab

08003a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0ba      	sub	sp, #232	@ 0xe8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_UART_IRQHandler+0x66>
 8003ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fc2f 	bl	8004346 <UART_Receive_IT>
      return;
 8003ae8:	e25b      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80de 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x22c>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80d1 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0xae>
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xd2>
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0xf6>
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f043 0204 	orr.w	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0208 	orr.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 81f2 	beq.w	8003f98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x14e>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fbba 	bl	8004346 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_UART_IRQHandler+0x17a>
 8003bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04f      	beq.n	8003c9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fac4 	bl	800418c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d141      	bne.n	8003c96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1d9      	bne.n	8003c12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d013      	beq.n	8003c8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e64 <HAL_UART_IRQHandler+0x3e0>)
 8003c6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fb15 	bl	80022a2 <HAL_DMA_Abort_IT>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e00e      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f99c 	bl	8003fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00a      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f998 	bl	8003fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e006      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f994 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003caa:	e175      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	bf00      	nop
    return;
 8003cae:	e173      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 814f 	bne.w	8003f58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8148 	beq.w	8003f58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8141 	beq.w	8003f58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	2b40      	cmp	r3, #64	@ 0x40
 8003cf8:	f040 80b6 	bne.w	8003e68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8145 	beq.w	8003f9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	f080 813e 	bcs.w	8003f9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	f000 8088 	beq.w	8003e44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1d9      	bne.n	8003d34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003da4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e1      	bne.n	8003d80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003de0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003de2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003de6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e3      	bne.n	8003dbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e14:	f023 0310 	bic.w	r3, r3, #16
 8003e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e3      	bne.n	8003e02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f9f2 	bl	8002228 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8bf 	bl	8003fde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e60:	e09c      	b.n	8003f9c <HAL_UART_IRQHandler+0x518>
 8003e62:	bf00      	nop
 8003e64:	08004251 	.word	0x08004251
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 808e 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8089 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e3      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f30:	61fa      	str	r2, [r7, #28]
 8003f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e3      	bne.n	8003f0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f844 	bl	8003fde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f56:	e023      	b.n	8003fa0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_UART_IRQHandler+0x4f4>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f981 	bl	8004278 <UART_Transmit_IT>
    return;
 8003f76:	e014      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f9c0 	bl	8004316 <UART_EndTransmit_IT>
    return;
 8003f96:	e004      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f98:	bf00      	nop
 8003f9a:	e002      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fa0:	bf00      	nop
  }
}
 8003fa2:	37e8      	adds	r7, #232	@ 0xe8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b090      	sub	sp, #64	@ 0x40
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d137      	bne.n	8004080 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004012:	2200      	movs	r2, #0
 8004014:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	623b      	str	r3, [r7, #32]
   return(result);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800402e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004036:	633a      	str	r2, [r7, #48]	@ 0x30
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800403c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	60fb      	str	r3, [r7, #12]
   return(result);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
 8004062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800406a:	61fa      	str	r2, [r7, #28]
 800406c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	617b      	str	r3, [r7, #20]
   return(result);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800407e:	e002      	b.n	8004086 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004080:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004082:	f7fc ff6f 	bl	8000f64 <HAL_UART_TxCpltCallback>
}
 8004086:	bf00      	nop
 8004088:	3740      	adds	r7, #64	@ 0x40
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ff83 	bl	8003fa8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b80      	cmp	r3, #128	@ 0x80
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b21      	cmp	r3, #33	@ 0x21
 80040dc:	d108      	bne.n	80040f0 <UART_DMAError+0x46>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f000 f827 	bl	800413e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b22      	cmp	r3, #34	@ 0x22
 8004110:	d108      	bne.n	8004124 <UART_DMAError+0x7a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800411e:	68b8      	ldr	r0, [r7, #8]
 8004120:	f000 f834 	bl	800418c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004130:	68b8      	ldr	r0, [r7, #8]
 8004132:	f7ff ff4b 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b089      	sub	sp, #36	@ 0x24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	60bb      	str	r3, [r7, #8]
   return(result);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	61ba      	str	r2, [r7, #24]
 8004168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6979      	ldr	r1, [r7, #20]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e5      	bne.n	8004146 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	@ 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b095      	sub	sp, #84	@ 0x54
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	2b01      	cmp	r3, #1
 8004202:	d119      	bne.n	8004238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	60bb      	str	r3, [r7, #8]
   return(result);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f023 0310 	bic.w	r3, r3, #16
 800421a:	647b      	str	r3, [r7, #68]	@ 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004224:	61ba      	str	r2, [r7, #24]
 8004226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	613b      	str	r3, [r7, #16]
   return(result);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004246:	bf00      	nop
 8004248:	3754      	adds	r7, #84	@ 0x54
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff feae 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b21      	cmp	r3, #33	@ 0x21
 800428a:	d13e      	bne.n	800430a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004294:	d114      	bne.n	80042c0 <UART_Transmit_IT+0x48>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]
 80042be:	e008      	b.n	80042d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6211      	str	r1, [r2, #32]
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc fe14 	bl	8000f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b08c      	sub	sp, #48	@ 0x30
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b22      	cmp	r3, #34	@ 0x22
 8004358:	f040 80ae 	bne.w	80044b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004364:	d117      	bne.n	8004396 <UART_Receive_IT+0x50>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d113      	bne.n	8004396 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004384:	b29a      	uxth	r2, r3
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	@ 0x28
 8004394:	e026      	b.n	80043e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a8:	d007      	beq.n	80043ba <UART_Receive_IT+0x74>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <UART_Receive_IT+0x82>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e008      	b.n	80043da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4619      	mov	r1, r3
 80043f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d15d      	bne.n	80044b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0220 	bic.w	r2, r2, #32
 8004406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	2b01      	cmp	r3, #1
 800443c:	d135      	bne.n	80044aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004464:	623a      	str	r2, [r7, #32]
 8004466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	61bb      	str	r3, [r7, #24]
   return(result);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b10      	cmp	r3, #16
 8004484:	d10a      	bne.n	800449c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fd9b 	bl	8003fde <HAL_UARTEx_RxEventCallback>
 80044a8:	e002      	b.n	80044b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fd85 	bl	8003fba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e002      	b.n	80044ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e000      	b.n	80044ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3730      	adds	r7, #48	@ 0x30
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004504:	f023 030c 	bic.w	r3, r3, #12
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	430b      	orrs	r3, r1
 8004510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a55      	ldr	r2, [pc, #340]	@ (8004684 <UART_SetConfig+0x1c0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d103      	bne.n	800453a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004532:	f7fe ff21 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	e002      	b.n	8004540 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800453a:	f7fe ff09 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 800453e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004548:	d14c      	bne.n	80045e4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009a      	lsls	r2, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	4a49      	ldr	r2, [pc, #292]	@ (8004688 <UART_SetConfig+0x1c4>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	0119      	lsls	r1, r3, #4
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009a      	lsls	r2, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004580:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <UART_SetConfig+0x1c4>)
 8004582:	fba3 0302 	umull	r0, r3, r3, r2
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2064      	movs	r0, #100	@ 0x64
 800458a:	fb00 f303 	mul.w	r3, r0, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	3332      	adds	r3, #50	@ 0x32
 8004594:	4a3c      	ldr	r2, [pc, #240]	@ (8004688 <UART_SetConfig+0x1c4>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045a2:	4419      	add	r1, r3
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009a      	lsls	r2, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ba:	4b33      	ldr	r3, [pc, #204]	@ (8004688 <UART_SetConfig+0x1c4>)
 80045bc:	fba3 0302 	umull	r0, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2064      	movs	r0, #100	@ 0x64
 80045c4:	fb00 f303 	mul.w	r3, r0, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	3332      	adds	r3, #50	@ 0x32
 80045ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004688 <UART_SetConfig+0x1c4>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	440a      	add	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045e2:	e04a      	b.n	800467a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009a      	lsls	r2, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <UART_SetConfig+0x1c4>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	0119      	lsls	r1, r3, #4
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	fbb2 f2f3 	udiv	r2, r2, r3
 800461a:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <UART_SetConfig+0x1c4>)
 800461c:	fba3 0302 	umull	r0, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	2064      	movs	r0, #100	@ 0x64
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	3332      	adds	r3, #50	@ 0x32
 800462e:	4a16      	ldr	r2, [pc, #88]	@ (8004688 <UART_SetConfig+0x1c4>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800463a:	4419      	add	r1, r3
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009a      	lsls	r2, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <UART_SetConfig+0x1c4>)
 8004654:	fba3 0302 	umull	r0, r3, r3, r2
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	2064      	movs	r0, #100	@ 0x64
 800465c:	fb00 f303 	mul.w	r3, r0, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	3332      	adds	r3, #50	@ 0x32
 8004666:	4a08      	ldr	r2, [pc, #32]	@ (8004688 <UART_SetConfig+0x1c4>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	440a      	add	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40013800 	.word	0x40013800
 8004688:	51eb851f 	.word	0x51eb851f

0800468c <siprintf>:
 800468c:	b40e      	push	{r1, r2, r3}
 800468e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004692:	b500      	push	{lr}
 8004694:	b09c      	sub	sp, #112	@ 0x70
 8004696:	ab1d      	add	r3, sp, #116	@ 0x74
 8004698:	9002      	str	r0, [sp, #8]
 800469a:	9006      	str	r0, [sp, #24]
 800469c:	9107      	str	r1, [sp, #28]
 800469e:	9104      	str	r1, [sp, #16]
 80046a0:	4808      	ldr	r0, [pc, #32]	@ (80046c4 <siprintf+0x38>)
 80046a2:	4909      	ldr	r1, [pc, #36]	@ (80046c8 <siprintf+0x3c>)
 80046a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046a8:	9105      	str	r1, [sp, #20]
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	a902      	add	r1, sp, #8
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	f000 f992 	bl	80049d8 <_svfiprintf_r>
 80046b4:	2200      	movs	r2, #0
 80046b6:	9b02      	ldr	r3, [sp, #8]
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	b01c      	add	sp, #112	@ 0x70
 80046bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c0:	b003      	add	sp, #12
 80046c2:	4770      	bx	lr
 80046c4:	20000010 	.word	0x20000010
 80046c8:	ffff0208 	.word	0xffff0208

080046cc <memset>:
 80046cc:	4603      	mov	r3, r0
 80046ce:	4402      	add	r2, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d100      	bne.n	80046d6 <memset+0xa>
 80046d4:	4770      	bx	lr
 80046d6:	f803 1b01 	strb.w	r1, [r3], #1
 80046da:	e7f9      	b.n	80046d0 <memset+0x4>

080046dc <__errno>:
 80046dc:	4b01      	ldr	r3, [pc, #4]	@ (80046e4 <__errno+0x8>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000010 	.word	0x20000010

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	2600      	movs	r6, #0
 80046ec:	4d0c      	ldr	r5, [pc, #48]	@ (8004720 <__libc_init_array+0x38>)
 80046ee:	4c0d      	ldr	r4, [pc, #52]	@ (8004724 <__libc_init_array+0x3c>)
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	f000 fc78 	bl	8004fec <_init>
 80046fc:	2600      	movs	r6, #0
 80046fe:	4d0a      	ldr	r5, [pc, #40]	@ (8004728 <__libc_init_array+0x40>)
 8004700:	4c0a      	ldr	r4, [pc, #40]	@ (800472c <__libc_init_array+0x44>)
 8004702:	1b64      	subs	r4, r4, r5
 8004704:	10a4      	asrs	r4, r4, #2
 8004706:	42a6      	cmp	r6, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004710:	4798      	blx	r3
 8004712:	3601      	adds	r6, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f855 3b04 	ldr.w	r3, [r5], #4
 800471a:	4798      	blx	r3
 800471c:	3601      	adds	r6, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	0800506c 	.word	0x0800506c
 8004724:	0800506c 	.word	0x0800506c
 8004728:	0800506c 	.word	0x0800506c
 800472c:	08005070 	.word	0x08005070

08004730 <__retarget_lock_acquire_recursive>:
 8004730:	4770      	bx	lr

08004732 <__retarget_lock_release_recursive>:
 8004732:	4770      	bx	lr

08004734 <_free_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4605      	mov	r5, r0
 8004738:	2900      	cmp	r1, #0
 800473a:	d040      	beq.n	80047be <_free_r+0x8a>
 800473c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004740:	1f0c      	subs	r4, r1, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bfb8      	it	lt
 8004746:	18e4      	addlt	r4, r4, r3
 8004748:	f000 f8de 	bl	8004908 <__malloc_lock>
 800474c:	4a1c      	ldr	r2, [pc, #112]	@ (80047c0 <_free_r+0x8c>)
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	b933      	cbnz	r3, 8004760 <_free_r+0x2c>
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	6014      	str	r4, [r2, #0]
 8004756:	4628      	mov	r0, r5
 8004758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800475c:	f000 b8da 	b.w	8004914 <__malloc_unlock>
 8004760:	42a3      	cmp	r3, r4
 8004762:	d908      	bls.n	8004776 <_free_r+0x42>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	1821      	adds	r1, r4, r0
 8004768:	428b      	cmp	r3, r1
 800476a:	bf01      	itttt	eq
 800476c:	6819      	ldreq	r1, [r3, #0]
 800476e:	685b      	ldreq	r3, [r3, #4]
 8004770:	1809      	addeq	r1, r1, r0
 8004772:	6021      	streq	r1, [r4, #0]
 8004774:	e7ed      	b.n	8004752 <_free_r+0x1e>
 8004776:	461a      	mov	r2, r3
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b10b      	cbz	r3, 8004780 <_free_r+0x4c>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d9fa      	bls.n	8004776 <_free_r+0x42>
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	1850      	adds	r0, r2, r1
 8004784:	42a0      	cmp	r0, r4
 8004786:	d10b      	bne.n	80047a0 <_free_r+0x6c>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	4401      	add	r1, r0
 800478c:	1850      	adds	r0, r2, r1
 800478e:	4283      	cmp	r3, r0
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	d1e0      	bne.n	8004756 <_free_r+0x22>
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4408      	add	r0, r1
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	6053      	str	r3, [r2, #4]
 800479e:	e7da      	b.n	8004756 <_free_r+0x22>
 80047a0:	d902      	bls.n	80047a8 <_free_r+0x74>
 80047a2:	230c      	movs	r3, #12
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	e7d6      	b.n	8004756 <_free_r+0x22>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	1821      	adds	r1, r4, r0
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf01      	itttt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	6063      	str	r3, [r4, #4]
 80047ba:	6054      	str	r4, [r2, #4]
 80047bc:	e7cb      	b.n	8004756 <_free_r+0x22>
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000344 	.word	0x20000344

080047c4 <sbrk_aligned>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004804 <sbrk_aligned+0x40>)
 80047c8:	460c      	mov	r4, r1
 80047ca:	6831      	ldr	r1, [r6, #0]
 80047cc:	4605      	mov	r5, r0
 80047ce:	b911      	cbnz	r1, 80047d6 <sbrk_aligned+0x12>
 80047d0:	f000 fbaa 	bl	8004f28 <_sbrk_r>
 80047d4:	6030      	str	r0, [r6, #0]
 80047d6:	4621      	mov	r1, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 fba5 	bl	8004f28 <_sbrk_r>
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	d103      	bne.n	80047ea <sbrk_aligned+0x26>
 80047e2:	f04f 34ff 	mov.w	r4, #4294967295
 80047e6:	4620      	mov	r0, r4
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
 80047ea:	1cc4      	adds	r4, r0, #3
 80047ec:	f024 0403 	bic.w	r4, r4, #3
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d0f8      	beq.n	80047e6 <sbrk_aligned+0x22>
 80047f4:	1a21      	subs	r1, r4, r0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 fb96 	bl	8004f28 <_sbrk_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d1f2      	bne.n	80047e6 <sbrk_aligned+0x22>
 8004800:	e7ef      	b.n	80047e2 <sbrk_aligned+0x1e>
 8004802:	bf00      	nop
 8004804:	20000340 	.word	0x20000340

08004808 <_malloc_r>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	1ccd      	adds	r5, r1, #3
 800480e:	f025 0503 	bic.w	r5, r5, #3
 8004812:	3508      	adds	r5, #8
 8004814:	2d0c      	cmp	r5, #12
 8004816:	bf38      	it	cc
 8004818:	250c      	movcc	r5, #12
 800481a:	2d00      	cmp	r5, #0
 800481c:	4606      	mov	r6, r0
 800481e:	db01      	blt.n	8004824 <_malloc_r+0x1c>
 8004820:	42a9      	cmp	r1, r5
 8004822:	d904      	bls.n	800482e <_malloc_r+0x26>
 8004824:	230c      	movs	r3, #12
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	2000      	movs	r0, #0
 800482a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004904 <_malloc_r+0xfc>
 8004832:	f000 f869 	bl	8004908 <__malloc_lock>
 8004836:	f8d8 3000 	ldr.w	r3, [r8]
 800483a:	461c      	mov	r4, r3
 800483c:	bb44      	cbnz	r4, 8004890 <_malloc_r+0x88>
 800483e:	4629      	mov	r1, r5
 8004840:	4630      	mov	r0, r6
 8004842:	f7ff ffbf 	bl	80047c4 <sbrk_aligned>
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	4604      	mov	r4, r0
 800484a:	d158      	bne.n	80048fe <_malloc_r+0xf6>
 800484c:	f8d8 4000 	ldr.w	r4, [r8]
 8004850:	4627      	mov	r7, r4
 8004852:	2f00      	cmp	r7, #0
 8004854:	d143      	bne.n	80048de <_malloc_r+0xd6>
 8004856:	2c00      	cmp	r4, #0
 8004858:	d04b      	beq.n	80048f2 <_malloc_r+0xea>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	4639      	mov	r1, r7
 800485e:	4630      	mov	r0, r6
 8004860:	eb04 0903 	add.w	r9, r4, r3
 8004864:	f000 fb60 	bl	8004f28 <_sbrk_r>
 8004868:	4581      	cmp	r9, r0
 800486a:	d142      	bne.n	80048f2 <_malloc_r+0xea>
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	4630      	mov	r0, r6
 8004870:	1a6d      	subs	r5, r5, r1
 8004872:	4629      	mov	r1, r5
 8004874:	f7ff ffa6 	bl	80047c4 <sbrk_aligned>
 8004878:	3001      	adds	r0, #1
 800487a:	d03a      	beq.n	80048f2 <_malloc_r+0xea>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	442b      	add	r3, r5
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	f8d8 3000 	ldr.w	r3, [r8]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	bb62      	cbnz	r2, 80048e4 <_malloc_r+0xdc>
 800488a:	f8c8 7000 	str.w	r7, [r8]
 800488e:	e00f      	b.n	80048b0 <_malloc_r+0xa8>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	1b52      	subs	r2, r2, r5
 8004894:	d420      	bmi.n	80048d8 <_malloc_r+0xd0>
 8004896:	2a0b      	cmp	r2, #11
 8004898:	d917      	bls.n	80048ca <_malloc_r+0xc2>
 800489a:	1961      	adds	r1, r4, r5
 800489c:	42a3      	cmp	r3, r4
 800489e:	6025      	str	r5, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	6059      	strne	r1, [r3, #4]
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	bf08      	it	eq
 80048a8:	f8c8 1000 	streq.w	r1, [r8]
 80048ac:	5162      	str	r2, [r4, r5]
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f82f 	bl	8004914 <__malloc_unlock>
 80048b6:	f104 000b 	add.w	r0, r4, #11
 80048ba:	1d23      	adds	r3, r4, #4
 80048bc:	f020 0007 	bic.w	r0, r0, #7
 80048c0:	1ac2      	subs	r2, r0, r3
 80048c2:	bf1c      	itt	ne
 80048c4:	1a1b      	subne	r3, r3, r0
 80048c6:	50a3      	strne	r3, [r4, r2]
 80048c8:	e7af      	b.n	800482a <_malloc_r+0x22>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	bf0c      	ite	eq
 80048d0:	f8c8 2000 	streq.w	r2, [r8]
 80048d4:	605a      	strne	r2, [r3, #4]
 80048d6:	e7eb      	b.n	80048b0 <_malloc_r+0xa8>
 80048d8:	4623      	mov	r3, r4
 80048da:	6864      	ldr	r4, [r4, #4]
 80048dc:	e7ae      	b.n	800483c <_malloc_r+0x34>
 80048de:	463c      	mov	r4, r7
 80048e0:	687f      	ldr	r7, [r7, #4]
 80048e2:	e7b6      	b.n	8004852 <_malloc_r+0x4a>
 80048e4:	461a      	mov	r2, r3
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d1fb      	bne.n	80048e4 <_malloc_r+0xdc>
 80048ec:	2300      	movs	r3, #0
 80048ee:	6053      	str	r3, [r2, #4]
 80048f0:	e7de      	b.n	80048b0 <_malloc_r+0xa8>
 80048f2:	230c      	movs	r3, #12
 80048f4:	4630      	mov	r0, r6
 80048f6:	6033      	str	r3, [r6, #0]
 80048f8:	f000 f80c 	bl	8004914 <__malloc_unlock>
 80048fc:	e794      	b.n	8004828 <_malloc_r+0x20>
 80048fe:	6005      	str	r5, [r0, #0]
 8004900:	e7d6      	b.n	80048b0 <_malloc_r+0xa8>
 8004902:	bf00      	nop
 8004904:	20000344 	.word	0x20000344

08004908 <__malloc_lock>:
 8004908:	4801      	ldr	r0, [pc, #4]	@ (8004910 <__malloc_lock+0x8>)
 800490a:	f7ff bf11 	b.w	8004730 <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	2000033c 	.word	0x2000033c

08004914 <__malloc_unlock>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__malloc_unlock+0x8>)
 8004916:	f7ff bf0c 	b.w	8004732 <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	2000033c 	.word	0x2000033c

08004920 <__ssputs_r>:
 8004920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	461f      	mov	r7, r3
 8004926:	688e      	ldr	r6, [r1, #8]
 8004928:	4682      	mov	sl, r0
 800492a:	42be      	cmp	r6, r7
 800492c:	460c      	mov	r4, r1
 800492e:	4690      	mov	r8, r2
 8004930:	680b      	ldr	r3, [r1, #0]
 8004932:	d82d      	bhi.n	8004990 <__ssputs_r+0x70>
 8004934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004938:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800493c:	d026      	beq.n	800498c <__ssputs_r+0x6c>
 800493e:	6965      	ldr	r5, [r4, #20]
 8004940:	6909      	ldr	r1, [r1, #16]
 8004942:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004946:	eba3 0901 	sub.w	r9, r3, r1
 800494a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800494e:	1c7b      	adds	r3, r7, #1
 8004950:	444b      	add	r3, r9
 8004952:	106d      	asrs	r5, r5, #1
 8004954:	429d      	cmp	r5, r3
 8004956:	bf38      	it	cc
 8004958:	461d      	movcc	r5, r3
 800495a:	0553      	lsls	r3, r2, #21
 800495c:	d527      	bpl.n	80049ae <__ssputs_r+0x8e>
 800495e:	4629      	mov	r1, r5
 8004960:	f7ff ff52 	bl	8004808 <_malloc_r>
 8004964:	4606      	mov	r6, r0
 8004966:	b360      	cbz	r0, 80049c2 <__ssputs_r+0xa2>
 8004968:	464a      	mov	r2, r9
 800496a:	6921      	ldr	r1, [r4, #16]
 800496c:	f000 fafa 	bl	8004f64 <memcpy>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	6126      	str	r6, [r4, #16]
 800497e:	444e      	add	r6, r9
 8004980:	6026      	str	r6, [r4, #0]
 8004982:	463e      	mov	r6, r7
 8004984:	6165      	str	r5, [r4, #20]
 8004986:	eba5 0509 	sub.w	r5, r5, r9
 800498a:	60a5      	str	r5, [r4, #8]
 800498c:	42be      	cmp	r6, r7
 800498e:	d900      	bls.n	8004992 <__ssputs_r+0x72>
 8004990:	463e      	mov	r6, r7
 8004992:	4632      	mov	r2, r6
 8004994:	4641      	mov	r1, r8
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	f000 faac 	bl	8004ef4 <memmove>
 800499c:	2000      	movs	r0, #0
 800499e:	68a3      	ldr	r3, [r4, #8]
 80049a0:	1b9b      	subs	r3, r3, r6
 80049a2:	60a3      	str	r3, [r4, #8]
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	4433      	add	r3, r6
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ae:	462a      	mov	r2, r5
 80049b0:	f000 fae6 	bl	8004f80 <_realloc_r>
 80049b4:	4606      	mov	r6, r0
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d1e0      	bne.n	800497c <__ssputs_r+0x5c>
 80049ba:	4650      	mov	r0, sl
 80049bc:	6921      	ldr	r1, [r4, #16]
 80049be:	f7ff feb9 	bl	8004734 <_free_r>
 80049c2:	230c      	movs	r3, #12
 80049c4:	f8ca 3000 	str.w	r3, [sl]
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	e7e9      	b.n	80049aa <__ssputs_r+0x8a>
	...

080049d8 <_svfiprintf_r>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	4698      	mov	r8, r3
 80049de:	898b      	ldrh	r3, [r1, #12]
 80049e0:	4607      	mov	r7, r0
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	460d      	mov	r5, r1
 80049e6:	4614      	mov	r4, r2
 80049e8:	b09d      	sub	sp, #116	@ 0x74
 80049ea:	d510      	bpl.n	8004a0e <_svfiprintf_r+0x36>
 80049ec:	690b      	ldr	r3, [r1, #16]
 80049ee:	b973      	cbnz	r3, 8004a0e <_svfiprintf_r+0x36>
 80049f0:	2140      	movs	r1, #64	@ 0x40
 80049f2:	f7ff ff09 	bl	8004808 <_malloc_r>
 80049f6:	6028      	str	r0, [r5, #0]
 80049f8:	6128      	str	r0, [r5, #16]
 80049fa:	b930      	cbnz	r0, 8004a0a <_svfiprintf_r+0x32>
 80049fc:	230c      	movs	r3, #12
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	b01d      	add	sp, #116	@ 0x74
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0a:	2340      	movs	r3, #64	@ 0x40
 8004a0c:	616b      	str	r3, [r5, #20]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a12:	2320      	movs	r3, #32
 8004a14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a18:	2330      	movs	r3, #48	@ 0x30
 8004a1a:	f04f 0901 	mov.w	r9, #1
 8004a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004bbc <_svfiprintf_r+0x1e4>
 8004a26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a32:	b10a      	cbz	r2, 8004a38 <_svfiprintf_r+0x60>
 8004a34:	2a25      	cmp	r2, #37	@ 0x25
 8004a36:	d1f9      	bne.n	8004a2c <_svfiprintf_r+0x54>
 8004a38:	ebba 0b04 	subs.w	fp, sl, r4
 8004a3c:	d00b      	beq.n	8004a56 <_svfiprintf_r+0x7e>
 8004a3e:	465b      	mov	r3, fp
 8004a40:	4622      	mov	r2, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7ff ff6b 	bl	8004920 <__ssputs_r>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f000 80a7 	beq.w	8004b9e <_svfiprintf_r+0x1c6>
 8004a50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a52:	445a      	add	r2, fp
 8004a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a56:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 809f 	beq.w	8004b9e <_svfiprintf_r+0x1c6>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a6a:	f10a 0a01 	add.w	sl, sl, #1
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	9307      	str	r3, [sp, #28]
 8004a72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a76:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a78:	4654      	mov	r4, sl
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a80:	484e      	ldr	r0, [pc, #312]	@ (8004bbc <_svfiprintf_r+0x1e4>)
 8004a82:	f000 fa61 	bl	8004f48 <memchr>
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	b9d8      	cbnz	r0, 8004ac2 <_svfiprintf_r+0xea>
 8004a8a:	06d0      	lsls	r0, r2, #27
 8004a8c:	bf44      	itt	mi
 8004a8e:	2320      	movmi	r3, #32
 8004a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a94:	0711      	lsls	r1, r2, #28
 8004a96:	bf44      	itt	mi
 8004a98:	232b      	movmi	r3, #43	@ 0x2b
 8004a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aa4:	d015      	beq.n	8004ad2 <_svfiprintf_r+0xfa>
 8004aa6:	4654      	mov	r4, sl
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f04f 0c0a 	mov.w	ip, #10
 8004aae:	9a07      	ldr	r2, [sp, #28]
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab6:	3b30      	subs	r3, #48	@ 0x30
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d94b      	bls.n	8004b54 <_svfiprintf_r+0x17c>
 8004abc:	b1b0      	cbz	r0, 8004aec <_svfiprintf_r+0x114>
 8004abe:	9207      	str	r2, [sp, #28]
 8004ac0:	e014      	b.n	8004aec <_svfiprintf_r+0x114>
 8004ac2:	eba0 0308 	sub.w	r3, r0, r8
 8004ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	46a2      	mov	sl, r4
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	e7d2      	b.n	8004a78 <_svfiprintf_r+0xa0>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	1d19      	adds	r1, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	9103      	str	r1, [sp, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfbb      	ittet	lt
 8004ade:	425b      	neglt	r3, r3
 8004ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae4:	9307      	strge	r3, [sp, #28]
 8004ae6:	9307      	strlt	r3, [sp, #28]
 8004ae8:	bfb8      	it	lt
 8004aea:	9204      	strlt	r2, [sp, #16]
 8004aec:	7823      	ldrb	r3, [r4, #0]
 8004aee:	2b2e      	cmp	r3, #46	@ 0x2e
 8004af0:	d10a      	bne.n	8004b08 <_svfiprintf_r+0x130>
 8004af2:	7863      	ldrb	r3, [r4, #1]
 8004af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004af6:	d132      	bne.n	8004b5e <_svfiprintf_r+0x186>
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	3402      	adds	r4, #2
 8004afc:	1d1a      	adds	r2, r3, #4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	9203      	str	r2, [sp, #12]
 8004b02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004bc0 <_svfiprintf_r+0x1e8>
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	4650      	mov	r0, sl
 8004b10:	7821      	ldrb	r1, [r4, #0]
 8004b12:	f000 fa19 	bl	8004f48 <memchr>
 8004b16:	b138      	cbz	r0, 8004b28 <_svfiprintf_r+0x150>
 8004b18:	2240      	movs	r2, #64	@ 0x40
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	eba0 000a 	sub.w	r0, r0, sl
 8004b20:	4082      	lsls	r2, r0
 8004b22:	4313      	orrs	r3, r2
 8004b24:	3401      	adds	r4, #1
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	4825      	ldr	r0, [pc, #148]	@ (8004bc4 <_svfiprintf_r+0x1ec>)
 8004b30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b34:	f000 fa08 	bl	8004f48 <memchr>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d036      	beq.n	8004baa <_svfiprintf_r+0x1d2>
 8004b3c:	4b22      	ldr	r3, [pc, #136]	@ (8004bc8 <_svfiprintf_r+0x1f0>)
 8004b3e:	bb1b      	cbnz	r3, 8004b88 <_svfiprintf_r+0x1b0>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	3308      	adds	r3, #8
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b4e:	4433      	add	r3, r6
 8004b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b52:	e76a      	b.n	8004a2a <_svfiprintf_r+0x52>
 8004b54:	460c      	mov	r4, r1
 8004b56:	2001      	movs	r0, #1
 8004b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5c:	e7a8      	b.n	8004ab0 <_svfiprintf_r+0xd8>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f04f 0c0a 	mov.w	ip, #10
 8004b64:	4619      	mov	r1, r3
 8004b66:	3401      	adds	r4, #1
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b70:	3a30      	subs	r2, #48	@ 0x30
 8004b72:	2a09      	cmp	r2, #9
 8004b74:	d903      	bls.n	8004b7e <_svfiprintf_r+0x1a6>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c6      	beq.n	8004b08 <_svfiprintf_r+0x130>
 8004b7a:	9105      	str	r1, [sp, #20]
 8004b7c:	e7c4      	b.n	8004b08 <_svfiprintf_r+0x130>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2301      	movs	r3, #1
 8004b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b86:	e7f0      	b.n	8004b6a <_svfiprintf_r+0x192>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4638      	mov	r0, r7
 8004b90:	4b0e      	ldr	r3, [pc, #56]	@ (8004bcc <_svfiprintf_r+0x1f4>)
 8004b92:	a904      	add	r1, sp, #16
 8004b94:	f3af 8000 	nop.w
 8004b98:	1c42      	adds	r2, r0, #1
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	d1d6      	bne.n	8004b4c <_svfiprintf_r+0x174>
 8004b9e:	89ab      	ldrh	r3, [r5, #12]
 8004ba0:	065b      	lsls	r3, r3, #25
 8004ba2:	f53f af2d 	bmi.w	8004a00 <_svfiprintf_r+0x28>
 8004ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ba8:	e72c      	b.n	8004a04 <_svfiprintf_r+0x2c>
 8004baa:	ab03      	add	r3, sp, #12
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	462a      	mov	r2, r5
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <_svfiprintf_r+0x1f4>)
 8004bb4:	a904      	add	r1, sp, #16
 8004bb6:	f000 f87d 	bl	8004cb4 <_printf_i>
 8004bba:	e7ed      	b.n	8004b98 <_svfiprintf_r+0x1c0>
 8004bbc:	08005030 	.word	0x08005030
 8004bc0:	08005036 	.word	0x08005036
 8004bc4:	0800503a 	.word	0x0800503a
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	08004921 	.word	0x08004921

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4698      	mov	r8, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	4607      	mov	r7, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	bfb8      	it	lt
 8004be2:	4613      	movlt	r3, r2
 8004be4:	6033      	str	r3, [r6, #0]
 8004be6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bea:	460c      	mov	r4, r1
 8004bec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc2b      	bgt.n	8004c70 <_printf_common+0xa0>
 8004c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c1c:	6822      	ldr	r2, [r4, #0]
 8004c1e:	3b00      	subs	r3, #0
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d430      	bmi.n	8004c8a <_printf_common+0xba>
 8004c28:	4641      	mov	r1, r8
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c30:	47c8      	blx	r9
 8004c32:	3001      	adds	r0, #1
 8004c34:	d023      	beq.n	8004c7e <_printf_common+0xae>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	6922      	ldr	r2, [r4, #16]
 8004c3a:	f003 0306 	and.w	r3, r3, #6
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf14      	ite	ne
 8004c42:	2500      	movne	r5, #0
 8004c44:	6833      	ldreq	r3, [r6, #0]
 8004c46:	f04f 0600 	mov.w	r6, #0
 8004c4a:	bf08      	it	eq
 8004c4c:	68e5      	ldreq	r5, [r4, #12]
 8004c4e:	f104 041a 	add.w	r4, r4, #26
 8004c52:	bf08      	it	eq
 8004c54:	1aed      	subeq	r5, r5, r3
 8004c56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c5a:	bf08      	it	eq
 8004c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bfc4      	itt	gt
 8004c64:	1a9b      	subgt	r3, r3, r2
 8004c66:	18ed      	addgt	r5, r5, r3
 8004c68:	42b5      	cmp	r5, r6
 8004c6a:	d11a      	bne.n	8004ca2 <_printf_common+0xd2>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e008      	b.n	8004c82 <_printf_common+0xb2>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4652      	mov	r2, sl
 8004c74:	4641      	mov	r1, r8
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c8      	blx	r9
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d103      	bne.n	8004c86 <_printf_common+0xb6>
 8004c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c86:	3501      	adds	r5, #1
 8004c88:	e7c1      	b.n	8004c0e <_printf_common+0x3e>
 8004c8a:	2030      	movs	r0, #48	@ 0x30
 8004c8c:	18e1      	adds	r1, r4, r3
 8004c8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c98:	4422      	add	r2, r4
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ca0:	e7c2      	b.n	8004c28 <_printf_common+0x58>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	4638      	mov	r0, r7
 8004caa:	47c8      	blx	r9
 8004cac:	3001      	adds	r0, #1
 8004cae:	d0e6      	beq.n	8004c7e <_printf_common+0xae>
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7d9      	b.n	8004c68 <_printf_common+0x98>

08004cb4 <_printf_i>:
 8004cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	7e0f      	ldrb	r7, [r1, #24]
 8004cba:	4691      	mov	r9, r2
 8004cbc:	2f78      	cmp	r7, #120	@ 0x78
 8004cbe:	4680      	mov	r8, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	469a      	mov	sl, r3
 8004cc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cca:	d807      	bhi.n	8004cdc <_printf_i+0x28>
 8004ccc:	2f62      	cmp	r7, #98	@ 0x62
 8004cce:	d80a      	bhi.n	8004ce6 <_printf_i+0x32>
 8004cd0:	2f00      	cmp	r7, #0
 8004cd2:	f000 80d3 	beq.w	8004e7c <_printf_i+0x1c8>
 8004cd6:	2f58      	cmp	r7, #88	@ 0x58
 8004cd8:	f000 80ba 	beq.w	8004e50 <_printf_i+0x19c>
 8004cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ce0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ce4:	e03a      	b.n	8004d5c <_printf_i+0xa8>
 8004ce6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cea:	2b15      	cmp	r3, #21
 8004cec:	d8f6      	bhi.n	8004cdc <_printf_i+0x28>
 8004cee:	a101      	add	r1, pc, #4	@ (adr r1, 8004cf4 <_printf_i+0x40>)
 8004cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf4:	08004d4d 	.word	0x08004d4d
 8004cf8:	08004d61 	.word	0x08004d61
 8004cfc:	08004cdd 	.word	0x08004cdd
 8004d00:	08004cdd 	.word	0x08004cdd
 8004d04:	08004cdd 	.word	0x08004cdd
 8004d08:	08004cdd 	.word	0x08004cdd
 8004d0c:	08004d61 	.word	0x08004d61
 8004d10:	08004cdd 	.word	0x08004cdd
 8004d14:	08004cdd 	.word	0x08004cdd
 8004d18:	08004cdd 	.word	0x08004cdd
 8004d1c:	08004cdd 	.word	0x08004cdd
 8004d20:	08004e63 	.word	0x08004e63
 8004d24:	08004d8b 	.word	0x08004d8b
 8004d28:	08004e1d 	.word	0x08004e1d
 8004d2c:	08004cdd 	.word	0x08004cdd
 8004d30:	08004cdd 	.word	0x08004cdd
 8004d34:	08004e85 	.word	0x08004e85
 8004d38:	08004cdd 	.word	0x08004cdd
 8004d3c:	08004d8b 	.word	0x08004d8b
 8004d40:	08004cdd 	.word	0x08004cdd
 8004d44:	08004cdd 	.word	0x08004cdd
 8004d48:	08004e25 	.word	0x08004e25
 8004d4c:	6833      	ldr	r3, [r6, #0]
 8004d4e:	1d1a      	adds	r2, r3, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6032      	str	r2, [r6, #0]
 8004d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e09e      	b.n	8004e9e <_printf_i+0x1ea>
 8004d60:	6833      	ldr	r3, [r6, #0]
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	1d19      	adds	r1, r3, #4
 8004d66:	6031      	str	r1, [r6, #0]
 8004d68:	0606      	lsls	r6, r0, #24
 8004d6a:	d501      	bpl.n	8004d70 <_printf_i+0xbc>
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	e003      	b.n	8004d78 <_printf_i+0xc4>
 8004d70:	0645      	lsls	r5, r0, #25
 8004d72:	d5fb      	bpl.n	8004d6c <_printf_i+0xb8>
 8004d74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	da03      	bge.n	8004d84 <_printf_i+0xd0>
 8004d7c:	232d      	movs	r3, #45	@ 0x2d
 8004d7e:	426d      	negs	r5, r5
 8004d80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d84:	230a      	movs	r3, #10
 8004d86:	4859      	ldr	r0, [pc, #356]	@ (8004eec <_printf_i+0x238>)
 8004d88:	e011      	b.n	8004dae <_printf_i+0xfa>
 8004d8a:	6821      	ldr	r1, [r4, #0]
 8004d8c:	6833      	ldr	r3, [r6, #0]
 8004d8e:	0608      	lsls	r0, r1, #24
 8004d90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d94:	d402      	bmi.n	8004d9c <_printf_i+0xe8>
 8004d96:	0649      	lsls	r1, r1, #25
 8004d98:	bf48      	it	mi
 8004d9a:	b2ad      	uxthmi	r5, r5
 8004d9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	bf14      	ite	ne
 8004da2:	230a      	movne	r3, #10
 8004da4:	2308      	moveq	r3, #8
 8004da6:	4851      	ldr	r0, [pc, #324]	@ (8004eec <_printf_i+0x238>)
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dae:	6866      	ldr	r6, [r4, #4]
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	bfa8      	it	ge
 8004db4:	6821      	ldrge	r1, [r4, #0]
 8004db6:	60a6      	str	r6, [r4, #8]
 8004db8:	bfa4      	itt	ge
 8004dba:	f021 0104 	bicge.w	r1, r1, #4
 8004dbe:	6021      	strge	r1, [r4, #0]
 8004dc0:	b90d      	cbnz	r5, 8004dc6 <_printf_i+0x112>
 8004dc2:	2e00      	cmp	r6, #0
 8004dc4:	d04b      	beq.n	8004e5e <_printf_i+0x1aa>
 8004dc6:	4616      	mov	r6, r2
 8004dc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dcc:	fb03 5711 	mls	r7, r3, r1, r5
 8004dd0:	5dc7      	ldrb	r7, [r0, r7]
 8004dd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dd6:	462f      	mov	r7, r5
 8004dd8:	42bb      	cmp	r3, r7
 8004dda:	460d      	mov	r5, r1
 8004ddc:	d9f4      	bls.n	8004dc8 <_printf_i+0x114>
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d10b      	bne.n	8004dfa <_printf_i+0x146>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	07df      	lsls	r7, r3, #31
 8004de6:	d508      	bpl.n	8004dfa <_printf_i+0x146>
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	6861      	ldr	r1, [r4, #4]
 8004dec:	4299      	cmp	r1, r3
 8004dee:	bfde      	ittt	le
 8004df0:	2330      	movle	r3, #48	@ 0x30
 8004df2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004df6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dfa:	1b92      	subs	r2, r2, r6
 8004dfc:	6122      	str	r2, [r4, #16]
 8004dfe:	464b      	mov	r3, r9
 8004e00:	4621      	mov	r1, r4
 8004e02:	4640      	mov	r0, r8
 8004e04:	f8cd a000 	str.w	sl, [sp]
 8004e08:	aa03      	add	r2, sp, #12
 8004e0a:	f7ff fee1 	bl	8004bd0 <_printf_common>
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d14a      	bne.n	8004ea8 <_printf_i+0x1f4>
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	b004      	add	sp, #16
 8004e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	f043 0320 	orr.w	r3, r3, #32
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	2778      	movs	r7, #120	@ 0x78
 8004e26:	4832      	ldr	r0, [pc, #200]	@ (8004ef0 <_printf_i+0x23c>)
 8004e28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	6831      	ldr	r1, [r6, #0]
 8004e30:	061f      	lsls	r7, r3, #24
 8004e32:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e36:	d402      	bmi.n	8004e3e <_printf_i+0x18a>
 8004e38:	065f      	lsls	r7, r3, #25
 8004e3a:	bf48      	it	mi
 8004e3c:	b2ad      	uxthmi	r5, r5
 8004e3e:	6031      	str	r1, [r6, #0]
 8004e40:	07d9      	lsls	r1, r3, #31
 8004e42:	bf44      	itt	mi
 8004e44:	f043 0320 	orrmi.w	r3, r3, #32
 8004e48:	6023      	strmi	r3, [r4, #0]
 8004e4a:	b11d      	cbz	r5, 8004e54 <_printf_i+0x1a0>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	e7ab      	b.n	8004da8 <_printf_i+0xf4>
 8004e50:	4826      	ldr	r0, [pc, #152]	@ (8004eec <_printf_i+0x238>)
 8004e52:	e7e9      	b.n	8004e28 <_printf_i+0x174>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	f023 0320 	bic.w	r3, r3, #32
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	e7f6      	b.n	8004e4c <_printf_i+0x198>
 8004e5e:	4616      	mov	r6, r2
 8004e60:	e7bd      	b.n	8004dde <_printf_i+0x12a>
 8004e62:	6833      	ldr	r3, [r6, #0]
 8004e64:	6825      	ldr	r5, [r4, #0]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6961      	ldr	r1, [r4, #20]
 8004e6a:	6030      	str	r0, [r6, #0]
 8004e6c:	062e      	lsls	r6, r5, #24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	d501      	bpl.n	8004e76 <_printf_i+0x1c2>
 8004e72:	6019      	str	r1, [r3, #0]
 8004e74:	e002      	b.n	8004e7c <_printf_i+0x1c8>
 8004e76:	0668      	lsls	r0, r5, #25
 8004e78:	d5fb      	bpl.n	8004e72 <_printf_i+0x1be>
 8004e7a:	8019      	strh	r1, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4616      	mov	r6, r2
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	e7bc      	b.n	8004dfe <_printf_i+0x14a>
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	2100      	movs	r1, #0
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	6032      	str	r2, [r6, #0]
 8004e8c:	681e      	ldr	r6, [r3, #0]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	4630      	mov	r0, r6
 8004e92:	f000 f859 	bl	8004f48 <memchr>
 8004e96:	b108      	cbz	r0, 8004e9c <_printf_i+0x1e8>
 8004e98:	1b80      	subs	r0, r0, r6
 8004e9a:	6060      	str	r0, [r4, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea6:	e7aa      	b.n	8004dfe <_printf_i+0x14a>
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	47d0      	blx	sl
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0ad      	beq.n	8004e12 <_printf_i+0x15e>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	079b      	lsls	r3, r3, #30
 8004eba:	d413      	bmi.n	8004ee4 <_printf_i+0x230>
 8004ebc:	68e0      	ldr	r0, [r4, #12]
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	bfb8      	it	lt
 8004ec4:	4618      	movlt	r0, r3
 8004ec6:	e7a6      	b.n	8004e16 <_printf_i+0x162>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4632      	mov	r2, r6
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4640      	mov	r0, r8
 8004ed0:	47d0      	blx	sl
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d09d      	beq.n	8004e12 <_printf_i+0x15e>
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	9903      	ldr	r1, [sp, #12]
 8004edc:	1a5b      	subs	r3, r3, r1
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	dcf2      	bgt.n	8004ec8 <_printf_i+0x214>
 8004ee2:	e7eb      	b.n	8004ebc <_printf_i+0x208>
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	f104 0619 	add.w	r6, r4, #25
 8004eea:	e7f5      	b.n	8004ed8 <_printf_i+0x224>
 8004eec:	08005041 	.word	0x08005041
 8004ef0:	08005052 	.word	0x08005052

08004ef4 <memmove>:
 8004ef4:	4288      	cmp	r0, r1
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	eb01 0402 	add.w	r4, r1, r2
 8004efc:	d902      	bls.n	8004f04 <memmove+0x10>
 8004efe:	4284      	cmp	r4, r0
 8004f00:	4623      	mov	r3, r4
 8004f02:	d807      	bhi.n	8004f14 <memmove+0x20>
 8004f04:	1e43      	subs	r3, r0, #1
 8004f06:	42a1      	cmp	r1, r4
 8004f08:	d008      	beq.n	8004f1c <memmove+0x28>
 8004f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f12:	e7f8      	b.n	8004f06 <memmove+0x12>
 8004f14:	4601      	mov	r1, r0
 8004f16:	4402      	add	r2, r0
 8004f18:	428a      	cmp	r2, r1
 8004f1a:	d100      	bne.n	8004f1e <memmove+0x2a>
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f26:	e7f7      	b.n	8004f18 <memmove+0x24>

08004f28 <_sbrk_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4d05      	ldr	r5, [pc, #20]	@ (8004f44 <_sbrk_r+0x1c>)
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	f7fc f96a 	bl	800120c <_sbrk>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_sbrk_r+0x1a>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_sbrk_r+0x1a>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000338 	.word	0x20000338

08004f48 <memchr>:
 8004f48:	4603      	mov	r3, r0
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	b2c9      	uxtb	r1, r1
 8004f4e:	4402      	add	r2, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	d101      	bne.n	8004f5a <memchr+0x12>
 8004f56:	2000      	movs	r0, #0
 8004f58:	e003      	b.n	8004f62 <memchr+0x1a>
 8004f5a:	7804      	ldrb	r4, [r0, #0]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	428c      	cmp	r4, r1
 8004f60:	d1f6      	bne.n	8004f50 <memchr+0x8>
 8004f62:	bd10      	pop	{r4, pc}

08004f64 <memcpy>:
 8004f64:	440a      	add	r2, r1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f6c:	d100      	bne.n	8004f70 <memcpy+0xc>
 8004f6e:	4770      	bx	lr
 8004f70:	b510      	push	{r4, lr}
 8004f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f76:	4291      	cmp	r1, r2
 8004f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7c:	d1f9      	bne.n	8004f72 <memcpy+0xe>
 8004f7e:	bd10      	pop	{r4, pc}

08004f80 <_realloc_r>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	4680      	mov	r8, r0
 8004f86:	4615      	mov	r5, r2
 8004f88:	460c      	mov	r4, r1
 8004f8a:	b921      	cbnz	r1, 8004f96 <_realloc_r+0x16>
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	f7ff bc39 	b.w	8004808 <_malloc_r>
 8004f96:	b92a      	cbnz	r2, 8004fa4 <_realloc_r+0x24>
 8004f98:	f7ff fbcc 	bl	8004734 <_free_r>
 8004f9c:	2400      	movs	r4, #0
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	f000 f81a 	bl	8004fdc <_malloc_usable_size_r>
 8004fa8:	4285      	cmp	r5, r0
 8004faa:	4606      	mov	r6, r0
 8004fac:	d802      	bhi.n	8004fb4 <_realloc_r+0x34>
 8004fae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004fb2:	d8f4      	bhi.n	8004f9e <_realloc_r+0x1e>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	f7ff fc26 	bl	8004808 <_malloc_r>
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0ec      	beq.n	8004f9c <_realloc_r+0x1c>
 8004fc2:	42b5      	cmp	r5, r6
 8004fc4:	462a      	mov	r2, r5
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	bf28      	it	cs
 8004fca:	4632      	movcs	r2, r6
 8004fcc:	f7ff ffca 	bl	8004f64 <memcpy>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7ff fbae 	bl	8004734 <_free_r>
 8004fd8:	463c      	mov	r4, r7
 8004fda:	e7e0      	b.n	8004f9e <_realloc_r+0x1e>

08004fdc <_malloc_usable_size_r>:
 8004fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe0:	1f18      	subs	r0, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bfbc      	itt	lt
 8004fe6:	580b      	ldrlt	r3, [r1, r0]
 8004fe8:	18c0      	addlt	r0, r0, r3
 8004fea:	4770      	bx	lr

08004fec <_init>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr

08004ff8 <_fini>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	bf00      	nop
 8004ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffe:	bc08      	pop	{r3}
 8005000:	469e      	mov	lr, r3
 8005002:	4770      	bx	lr
